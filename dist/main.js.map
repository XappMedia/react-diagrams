{"version":3,"sources":["webpack://storm-react-diagrams/webpack/universalModuleDefinition","webpack://storm-react-diagrams/webpack/bootstrap","webpack://storm-react-diagrams/external {\"commonjs\":\"lodash\",\"commonjs2\":\"lodash\",\"amd\":\"_\",\"root\":\"_\"}","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/DiagonalMovement.js","webpack://storm-react-diagrams/external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://storm-react-diagrams/./src/widgets/BaseWidget.tsx","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/Util.js","webpack://storm-react-diagrams/./src/Toolkit.ts","webpack://storm-react-diagrams/./src/models/BaseModel.ts","webpack://storm-react-diagrams/./src/models/PointModel.ts","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/Heuristic.js","webpack://storm-react-diagrams/./src/models/NodeModel.ts","webpack://storm-react-diagrams/./src/factories/AbstractFactory.ts","webpack://storm-react-diagrams/./src/routing/PathFinding.ts","webpack://storm-react-diagrams/./node_modules/heap/index.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JumpPointFinderBase.js","webpack://storm-react-diagrams/./src/BaseEntity.ts","webpack://storm-react-diagrams/./src/models/PortModel.ts","webpack://storm-react-diagrams/./src/actions/BaseAction.ts","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/Node.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/AStarFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BiAStarFinder.js","webpack://storm-react-diagrams/./src/models/LinkModel.ts","webpack://storm-react-diagrams/./src/defaults/models/DefaultPortModel.ts","webpack://storm-react-diagrams/./src/defaults/models/DefaultLinkModel.ts","webpack://storm-react-diagrams/./src/defaults/models/DefaultLabelModel.tsx","webpack://storm-react-diagrams/./src/models/LabelModel.ts","webpack://storm-react-diagrams/./src/main.ts","webpack://storm-react-diagrams/./src/models/DiagramModel.ts","webpack://storm-react-diagrams/./src/defaults/factories/DefaultPortFactory.tsx","webpack://storm-react-diagrams/./src/factories/AbstractPortFactory.ts","webpack://storm-react-diagrams/./src/defaults/factories/DefaultLabelFactory.tsx","webpack://storm-react-diagrams/./src/factories/AbstractLabelFactory.ts","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultLabelWidget.tsx","webpack://storm-react-diagrams/./src/defaults/models/DefaultNodeModel.ts","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultLinkWidget.tsx","webpack://storm-react-diagrams/./src/factories/AbstractLinkFactory.ts","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultNodeWidget.tsx","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultPortLabelWidget.tsx","webpack://storm-react-diagrams/./src/widgets/PortWidget.tsx","webpack://storm-react-diagrams/./src/factories/AbstractNodeFactory.ts","webpack://storm-react-diagrams/./src/actions/MoveCanvasAction.ts","webpack://storm-react-diagrams/./src/actions/MoveItemsAction.ts","webpack://storm-react-diagrams/./src/actions/SelectingAction.ts","webpack://storm-react-diagrams/./src/widgets/layers/LinkLayerWidget.tsx","webpack://storm-react-diagrams/./src/widgets/LinkWidget.tsx","webpack://storm-react-diagrams/./src/widgets/layers/NodeLayerWidget.tsx","webpack://storm-react-diagrams/./src/widgets/NodeWidget.tsx","webpack://storm-react-diagrams/./node_modules/closest/index.js","webpack://storm-react-diagrams/./node_modules/matches-selector/index.js","webpack://storm-react-diagrams/./node_modules/pathfinding/index.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/PathFinding.js","webpack://storm-react-diagrams/./node_modules/heap/lib/heap.js","webpack://storm-react-diagrams/(webpack)/buildin/module.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/Grid.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BestFirstFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BreadthFirstFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/DijkstraFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BiBestFirstFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BiBreadthFirstFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BiDijkstraFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/IDAStarFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JumpPointFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JPFNeverMoveDiagonally.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JPFAlwaysMoveDiagonally.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfNoObstacles.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","webpack://storm-react-diagrams/./node_modules/paths-js/path.js","webpack://storm-react-diagrams/./node_modules/paths-js/geom.js","webpack://storm-react-diagrams/./src/DiagramEngine.ts","webpack://storm-react-diagrams/./src/defaults/factories/DefaultLinkFactory.tsx","webpack://storm-react-diagrams/./src/defaults/factories/DefaultNodeFactory.ts","webpack://storm-react-diagrams/./src/widgets/DiagramWidget.tsx"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__2__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","DiagonalMovement","Always","Never","IfAtMostOneObstacle","OnlyWhenNoObstacles","React","BaseWidget","_super","__extends","props","_this","this","className","bem","selector","baseClass","getClassName","getProps","__assign","extraProps","Component","backtrace","node","path","x","y","parent","push","reverse","biBacktrace","nodeA","nodeB","pathA","pathB","concat","pathLength","sum","a","b","dx","dy","length","Math","sqrt","interpolate","x0","y0","x1","y1","abs","line","sx","sy","err","e2","expandPath","expanded","len","coord0","coord1","interpolated","interpolatedLen","j","smoothenPath","grid","ex","ey","newPath","coord","testCoord","blocked","isWalkableAt","lastValidCoord","compressPath","compressed","px","py","lx","ly","ldx","ldy","sq","closest","PathFinding_1","Path","Toolkit","UID","TESTING","TESTING_UID","replace","random","v","toString","element","document","body","generateLinePath","firstPoint","lastPoint","generateCurvePath","curvy","isHorizontal","curvyX","curvyY","generateDynamicPath","pathCoords","moveto","ROUTING_SCALING_FACTOR","slice","forEach","coords","lineto","print","BaseEntity_1","_","BaseModel","type","id","selected","getParent","setParent","getSelectedEntities","isSelected","deSerialize","ob","engine","serialize","merge","getType","getID","setSelected","iterateListeners","listener","event","selectionChanged","remove","entityRemoved","BaseEntity","BaseModel_1","PointModel","link","points","isConnectedToPort","getPortForPoint","getLink","removePoint","updateLocation","getX","getY","isLocked","manhattan","euclidean","octile","F","SQRT2","chebyshev","max","NodeModel","nodeType","extras","ports","setPosition","oldX","oldY","port","getLinks","point","getPointForPort","positionChanged","entities","map","portOb","getPortFactory","getNewInstance","addPort","doClone","lookupTable","clone","getPortFromID","getPort","getPorts","removePort","updateDimensions","_a","width","height","AbstractFactory","PF","pathFinderInstance","JumpPointFinder","heuristic","Heuristic","diagonalMovement","PathFinding","diagramEngine","instance","calculateDirectPath","from","to","matrix","getCanvasMatrix","Grid","findPath","translateRoutingX","floor","translateRoutingY","calculateLinkStartEndCoords","startIndex","findIndex","endIndex","undefined","pathToStart","pathToEnd","start","end","calculateDynamicPath","routingMatrix","dynamicPath","Util","Heap","JumpPointFinderBase","opt","trackJumpRecursion","startX","startY","endX","endY","openList","f","startNode","getNodeAt","endNode","g","opened","empty","pop","closed","_identifySuccessors","neighbors","neighbor","jumpPoint","jx","jy","ng","jumpNode","_findNeighbors","_jump","h","updateItem","Toolkit_1","listeners","locked","clearListeners","data","cb","firing","entity","stopPropagation","removeListener","addListener","uid","setLocked","lockChanged","PortModel","maximumLinks","links","parentNode","getNode","getName","getMaximumLinks","setMaximumLinks","removeLink","addLink","createLinkModel","isFinite","numberOfLinks","size","values","updateCoords","canLinkToPort","BaseAction","mouseX","mouseY","ms","Date","getTime","Node","walkable","AStarFinder","allowDiagonal","dontCrossCorners","weight","getNeighbors","BiAStarFinder","cmp","startOpenList","endOpenList","BY_START","BY_END","PointModel_1","LinkModel","linkType","sourcePort","targetPort","labels","label","labelOb","getLabelFactory","addLabel","target","setTargetPort","source","setSourcePort","setPoints","getPoints","isLastPoint","index","getPointIndex","indexOf","getPointModel","getFirstPoint","getLastPoint","sourcePortChanged","getSourcePort","getTargetPort","targetPortChanged","addPoint","generatePoint","pointModel","splice","removePointsBefore","removePointsAfter","removeMiddlePoints","PortModel_1","DefaultLinkModel_1","DefaultPortModel","isInput","in","DefaultLinkModel","LinkModel_1","DefaultLabelModel_1","LabelModel_1","color","curvyness","LabelModel","DefaultLabelModel","setLabel","setWidth","widthChanged","setColor","colorChanged","offsetY","offsetX","__export","NodeModel_1","DiagramModel","nodes","zoom","rendered","gridSize","setGridSize","gridUpdated","getGridPosition","pos","deSerializeDiagram","nodeOb","getNodeFactory","addNode","linkOb","getLinkFactory","serializeDiagram","clearSelection","ignore","getSelectedItems","filters","_i","arguments","Array","isArray","items","flatMap","uniq","filter","item","includes","setZoomLevel","zoomUpdated","setOffset","offsetUpdated","setOffsetX","setOffsetY","getOffsetY","getOffsetX","getZoomLevel","addAll","models","model","linksUpdated","isCreated","removeNode","nodesUpdated","getNodes","DefaultPortModel_1","AbstractPortFactory_1","DefaultPortFactory","initialConfig","AbstractPortFactory","AbstractFactory_1","AbstractLabelFactory_1","DefaultLabelWidget_1","DefaultLabelFactory","generateReactWidget","createElement","DefaultLabelWidget","AbstractLabelFactory","BaseWidget_1","render","DefaultNodeModel","addInPort","addOutPort","getInPorts","portModel","getOutPorts","DefaultLinkWidget","addPointToLink","shiftKey","isModelLocked","getMaxNumberPointsPerLink","getRelativeMousePoint","forceUpdate","pointAdded","findPathAndRelativePositionToRenderLabel","lengths","refPaths","getTotalLength","labelPosition","reduce","previousValue","currentValue","pathIndex","position","calculateLabelPosition","refLabels","labelDimensions","offsetWidth","offsetHeight","pathCentre","getPointAtLength","labelCoordinates","setAttribute","state","isSmartRoutingEnabled","pathFinding","default","calculateAllLabelPosition","componentDidUpdate","requestAnimationFrame","componentDidMount","pointIndex","cx","cy","onMouseLeave","setState","onMouseEnter","data-id","data-linkid","opacity","generateLabel","canvas","ref","getFactoryForLabel","generateLink","Bottom","cloneElement","getFactoryForLink","generateLinkSegment","Top","strokeLinecap","strokeOpacity","strokeWidth","onContextMenu","preventDefault","isSmartRoutingApplicable","nodesRendered","paths","directPathCoords","first","last","getRoutingMatrix","smartLink","simplifiedPath","onMouseDown","xOrY","margin","pointLeft","pointRight","this_1","data-point","labelModel","defaultProps","smooth","AbstractLinkFactory","DefaultPortLabelWidget_1","DefaultNodeWidget","generatePort","DefaultPortLabel","style","background","PortWidget_1","PortWidget","data-name","data-nodeid","AbstractNodeFactory","BaseAction_1","MoveCanvasAction","diagramModel","initialOffsetX","initialOffsetY","MoveItemsAction","moved","enableRepaintEntities","getDiagramModel","selectedItems","selectionModels","initialX","initialY","SelectingAction","mouseX2","mouseY2","getBoxDimensions","left","top","right","bottom","containsElement","z","dimensions","LinkWidget_1","LinkLayerWidget","transform","linksThatHaveInitiallyRendered","portCenter","getPortCenter","portCoords","getPortCoords","generatedLink","generateWidgetForLink","Error","LinkWidget","shouldComponentUpdate","canEntityRepaint","children","NodeWidget_1","NodeLayerWidget","updateNodeDimensions","getNodeDimensions","NodeWidget","generateWidgetForNode","matches","checkYoSelf","proto","Element","vendor","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","match","el","querySelectorAll","BestFirstFinder","BreadthFirstFinder","DijkstraFinder","BiBestFirstFinder","BiBreadthFirstFinder","BiDijkstraFinder","IDAStarFinder","defaultCmp","heapify","heappop","heappush","heappushpop","heapreplace","insort","min","nlargest","nsmallest","_siftdown","_siftup","lo","hi","mid","apply","array","lastelt","returnitem","_ref","_j","_len","_ref1","_results","_results1","elem","result","sort","los","startpos","newitem","parentpos","childpos","endpos","rightpos","pushpop","peek","contains","clear","heap","toArray","insert","front","has","copy","webpackPolyfill","deprecate","width_or_matrix","_buildNodes","isInside","setWalkableAt","s0","d0","s1","d1","s2","d2","s3","d3","thisNodes","newGrid","newNodes","orig","constructor","shift","by","trackRecursion","timeLimit","Infinity","nodesVisited","startTime","cost","search","cutoff","route","depth","k","neighbour","neighbours","retainCount","tested","cutOff","JPFNeverMoveDiagonally","JPFAlwaysMoveDiagonally","JPFMoveDiagonallyIfNoObstacles","JPFMoveDiagonallyIfAtMostOneObstacle","nx","ny","neighborNodes","neighborNode","isNextWalkable","isTopWalkable","isBottomWalkable","isRightWalkable","isLeftWalkable","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","iterator","_s","next","done","TypeError","_geom","init","_instructions","areEqualPoints","_ref3","_ref2","a1","b1","_ref32","a2","b2","trimZeros","string","char","charAt","substr","round","number","digits","str","toFixed","printInstrunction","_ref4","command","params","numbers","param","join","_ref5","prev","transformParams","instruction","transformer","V","pts","newPts","matrixTransform","H","A","transformEllipse","sweepFlag","isDegenerate","rx","ry","ax","C","Z","_default","newParams","verbosify","keys","args","plus","hlineto","vlineto","closepath","curveto","x2","y2","smoothcurveto","qcurveto","smoothqcurveto","arc","xrot","largeArcFlag","translate","_ret","newInstructions","rotate","angle","_ret2","rad","PI","cos","sin","scale","_ret3","shearX","_ret4","tan","shearY","_ret5","ps","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","instructions","connect","unshift","distPointToPoint","ay","bx","distPointToParabol","circumCenter","xc","yc","parabolsCrossX","fa","fb","q","doHalflinesCross","sa","sb","approx","hp","vec","det","u","torad","epsilon","ma","J","K","D","JK","L","l1","l2","newAx","newRx","newRy","atan","DiagramModel_1","main_1","DefaultPortFactory_1","DefaultLabelFactory_1","DiagramEngine","canvasMatrix","hAdjustmentFactor","vAdjustmentFactor","calculateMatrixDimensions","allNodesCoords","allLinks","allPortsCoords","allPointsCoords","minX","minBy","maxXElement","maxBy","maxX","minY","maxYElement","maxY","ceil","markNodes","markMatrixPoint","markPorts","allElements","nodeFactories","linkFactories","portFactories","labelFactories","paintableWidgets","installDefaultFactories","registerNodeFactory","DefaultNodeFactory","registerLinkFactory","DefaultLinkFactory","registerPortFactory","registerLabelFactory","repaintCanvas","clearRepaintEntities","recalculatePortsVisually","baseModel","setCanvas","setDiagramModel","getNodeFactories","getLinkFactories","getLabelFactories","labelFactoriesUpdated","portFactoriesUpdated","nodeFactoriesUpdated","linkFactoriesUpdated","getFactoryForNode","linkFactory","nodeFactory","getRelativePoint","clientX","clientY","canvasRect","getBoundingClientRect","getNodeElement","querySelector","getNodePortElement","sourceElement","sourceRect","rel","nodeElement","nodeRect","maxNumberPointsPerLink","setMaxNumberPointsPerLink","smartRouting","setSmartRoutingStatus","status","calculateCanvasMatrix","canvasWidth","canvasHeight","matrixWidth","matrixHeight","range","fill","calculateRoutingMatrix","cloneDeep","zoomToFit","xFactor","clientWidth","scrollWidth","yFactor","clientHeight","scrollHeight","zoomFactor","DefaultLinkWidget_1","AbstractLinkFactory_1","widget","stroke","DefaultNodeModel_1","DefaultNodeWidget_1","AbstractNodeFactory_1","LinkLayerWidget_1","NodeLayerWidget_1","MoveCanvasAction_1","MoveItemsAction_1","SelectingAction_1","DiagramWidget","onKeyUpPointer","onMouseMove","onMouseUp","action","wasMoved","renderedNodes","windowListener","diagramEngineListener","componentWillUnmount","removeEventListener","componentWillReceiveProps","nextProps","componentWillUpdate","onKeyUp","addEventListener","focus","getMouseElement","getAttribute","fireAction","actionStillFiring","stopFiringAction","shouldSkipEvent","actionStoppedFiring","startFiringAction","actionStartedFiring","relative","allSelected","amountX_1","amountY_1","amountZoom_1","allowCanvasTranslation","deleteKeys","keyCode","newLink","allowLooseLinks","selectedPoint","some","drawSelectionBox","onWheel","allowCanvasZoom","oldZoomFactor","scrollDelta","inverseZoom","deltaY","ctrlKey","boundingRect","currentTarget","widthDiff","heightDiff","nativeEvent","which"],"mappings":"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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"_\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"storm-react-diagrams\"] = factory(require(\"lodash\"), require(\"react\"));\n\telse\n\t\troot[\"storm-react-diagrams\"] = factory(root[\"_\"], root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__2__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","var DiagonalMovement = {\r\n    Always: 1,\r\n    Never: 2,\r\n    IfAtMostOneObstacle: 3,\r\n    OnlyWhenNoObstacles: 4\r\n};\r\n\r\nmodule.exports = DiagonalMovement;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","import * as React from \"react\";\nimport * as _ from \"lodash\";\n\nexport interface BaseWidgetProps {\n\t/**\n\t * Override the base class name\n\t */\n\tbaseClass?: string;\n\t/**\n\t * append additional classes\n\t */\n\tclassName?: string;\n\n\t/**\n\t * Additional props to add\n\t */\n\textraProps?: any;\n}\n\nexport class BaseWidget<P extends BaseWidgetProps = BaseWidgetProps, S = any> extends React.Component<P, S> {\n\tclassName: string;\n\n\tconstructor(name: string, props: P) {\n\t\tsuper(props);\n\t\tthis.className = name;\n\t}\n\n\tbem(selector: string): string {\n\t\treturn (this.props.baseClass || this.className) + selector + \" \";\n\t}\n\n\tgetClassName(): string {\n\t\treturn (\n\t\t\t(this.props.baseClass || this.className) + \" \" + (this.props.className ? this.props.className + \" \" : \"\")\n\t\t);\n\t}\n\n\tgetProps(): any {\n\t\treturn {\n\t\t\t...((this.props.extraProps as any) || {}),\n\t\t\tclassName: this.getClassName()\n\t\t};\n\t}\n}\n","/**\r\n * Backtrace according to the parent records and return the path.\r\n * (including both start and end nodes)\r\n * @param {Node} node End node\r\n * @return {Array<Array<number>>} the path\r\n */\r\nfunction backtrace(node) {\r\n    var path = [[node.x, node.y]];\r\n    while (node.parent) {\r\n        node = node.parent;\r\n        path.push([node.x, node.y]);\r\n    }\r\n    return path.reverse();\r\n}\r\nexports.backtrace = backtrace;\r\n\r\n/**\r\n * Backtrace from start and end node, and return the path.\r\n * (including both start and end nodes)\r\n * @param {Node}\r\n * @param {Node}\r\n */\r\nfunction biBacktrace(nodeA, nodeB) {\r\n    var pathA = backtrace(nodeA),\r\n        pathB = backtrace(nodeB);\r\n    return pathA.concat(pathB.reverse());\r\n}\r\nexports.biBacktrace = biBacktrace;\r\n\r\n/**\r\n * Compute the length of the path.\r\n * @param {Array<Array<number>>} path The path\r\n * @return {number} The length of the path\r\n */\r\nfunction pathLength(path) {\r\n    var i, sum = 0, a, b, dx, dy;\r\n    for (i = 1; i < path.length; ++i) {\r\n        a = path[i - 1];\r\n        b = path[i];\r\n        dx = a[0] - b[0];\r\n        dy = a[1] - b[1];\r\n        sum += Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    return sum;\r\n}\r\nexports.pathLength = pathLength;\r\n\r\n\r\n/**\r\n * Given the start and end coordinates, return all the coordinates lying\r\n * on the line formed by these coordinates, based on Bresenham's algorithm.\r\n * http://en.wikipedia.org/wiki/Bresenham's_line_algorithm#Simplification\r\n * @param {number} x0 Start x coordinate\r\n * @param {number} y0 Start y coordinate\r\n * @param {number} x1 End x coordinate\r\n * @param {number} y1 End y coordinate\r\n * @return {Array<Array<number>>} The coordinates on the line\r\n */\r\nfunction interpolate(x0, y0, x1, y1) {\r\n    var abs = Math.abs,\r\n        line = [],\r\n        sx, sy, dx, dy, err, e2;\r\n\r\n    dx = abs(x1 - x0);\r\n    dy = abs(y1 - y0);\r\n\r\n    sx = (x0 < x1) ? 1 : -1;\r\n    sy = (y0 < y1) ? 1 : -1;\r\n\r\n    err = dx - dy;\r\n\r\n    while (true) {\r\n        line.push([x0, y0]);\r\n\r\n        if (x0 === x1 && y0 === y1) {\r\n            break;\r\n        }\r\n        \r\n        e2 = 2 * err;\r\n        if (e2 > -dy) {\r\n            err = err - dy;\r\n            x0 = x0 + sx;\r\n        }\r\n        if (e2 < dx) {\r\n            err = err + dx;\r\n            y0 = y0 + sy;\r\n        }\r\n    }\r\n\r\n    return line;\r\n}\r\nexports.interpolate = interpolate;\r\n\r\n\r\n/**\r\n * Given a compressed path, return a new path that has all the segments\r\n * in it interpolated.\r\n * @param {Array<Array<number>>} path The path\r\n * @return {Array<Array<number>>} expanded path\r\n */\r\nfunction expandPath(path) {\r\n    var expanded = [],\r\n        len = path.length,\r\n        coord0, coord1,\r\n        interpolated,\r\n        interpolatedLen,\r\n        i, j;\r\n\r\n    if (len < 2) {\r\n        return expanded;\r\n    }\r\n\r\n    for (i = 0; i < len - 1; ++i) {\r\n        coord0 = path[i];\r\n        coord1 = path[i + 1];\r\n\r\n        interpolated = interpolate(coord0[0], coord0[1], coord1[0], coord1[1]);\r\n        interpolatedLen = interpolated.length;\r\n        for (j = 0; j < interpolatedLen - 1; ++j) {\r\n            expanded.push(interpolated[j]);\r\n        }\r\n    }\r\n    expanded.push(path[len - 1]);\r\n\r\n    return expanded;\r\n}\r\nexports.expandPath = expandPath;\r\n\r\n\r\n/**\r\n * Smoothen the give path.\r\n * The original path will not be modified; a new path will be returned.\r\n * @param {PF.Grid} grid\r\n * @param {Array<Array<number>>} path The path\r\n */\r\nfunction smoothenPath(grid, path) {\r\n    var len = path.length,\r\n        x0 = path[0][0],        // path start x\r\n        y0 = path[0][1],        // path start y\r\n        x1 = path[len - 1][0],  // path end x\r\n        y1 = path[len - 1][1],  // path end y\r\n        sx, sy,                 // current start coordinate\r\n        ex, ey,                 // current end coordinate\r\n        newPath,\r\n        i, j, coord, line, testCoord, blocked;\r\n\r\n    sx = x0;\r\n    sy = y0;\r\n    newPath = [[sx, sy]];\r\n\r\n    for (i = 2; i < len; ++i) {\r\n        coord = path[i];\r\n        ex = coord[0];\r\n        ey = coord[1];\r\n        line = interpolate(sx, sy, ex, ey);\r\n\r\n        blocked = false;\r\n        for (j = 1; j < line.length; ++j) {\r\n            testCoord = line[j];\r\n\r\n            if (!grid.isWalkableAt(testCoord[0], testCoord[1])) {\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (blocked) {\r\n            lastValidCoord = path[i - 1];\r\n            newPath.push(lastValidCoord);\r\n            sx = lastValidCoord[0];\r\n            sy = lastValidCoord[1];\r\n        }\r\n    }\r\n    newPath.push([x1, y1]);\r\n\r\n    return newPath;\r\n}\r\nexports.smoothenPath = smoothenPath;\r\n\r\n\r\n/**\r\n * Compress a path, remove redundant nodes without altering the shape\r\n * The original path is not modified\r\n * @param {Array<Array<number>>} path The path\r\n * @return {Array<Array<number>>} The compressed path\r\n */\r\nfunction compressPath(path) {\r\n\r\n    // nothing to compress\r\n    if(path.length < 3) {\r\n        return path;\r\n    }\r\n\r\n    var compressed = [],\r\n        sx = path[0][0], // start x\r\n        sy = path[0][1], // start y\r\n        px = path[1][0], // second point x\r\n        py = path[1][1], // second point y\r\n        dx = px - sx, // direction between the two points\r\n        dy = py - sy, // direction between the two points\r\n        lx, ly,\r\n        ldx, ldy,\r\n        sq, i;\r\n\r\n    // normalize the direction\r\n    sq = Math.sqrt(dx*dx + dy*dy);\r\n    dx /= sq;\r\n    dy /= sq;\r\n\r\n    // start the new path\r\n    compressed.push([sx,sy]);\r\n\r\n    for(i = 2; i < path.length; i++) {\r\n\r\n        // store the last point\r\n        lx = px;\r\n        ly = py;\r\n\r\n        // store the last direction\r\n        ldx = dx;\r\n        ldy = dy;\r\n\r\n        // next point\r\n        px = path[i][0];\r\n        py = path[i][1];\r\n\r\n        // next direction\r\n        dx = px - lx;\r\n        dy = py - ly;\r\n\r\n        // normalize\r\n        sq = Math.sqrt(dx*dx + dy*dy);\r\n        dx /= sq;\r\n        dy /= sq;\r\n\r\n        // if the direction has changed, store the point\r\n        if ( dx !== ldx || dy !== ldy ) {\r\n            compressed.push([lx,ly]);\r\n        }\r\n    }\r\n\r\n    // store the last point\r\n    compressed.push([px,py]);\r\n\r\n    return compressed;\r\n}\r\nexports.compressPath = compressPath;\r\n","// tslint:disable no-bitwise\nimport closest = require(\"closest\");\nimport { PointModel } from \"./models/PointModel\";\nimport { ROUTING_SCALING_FACTOR } from \"./routing/PathFinding\";\nimport * as Path from \"paths-js/path\";\n/**\n * @author Dylan Vorster\n */\nexport class Toolkit {\n\tstatic TESTING: boolean = false;\n\tstatic TESTING_UID = 0;\n\n\t/**\n\t * Generats a unique ID (thanks Stack overflow :3)\n\t * @returns {String}\n\t */\n\tpublic static UID(): string {\n\t\tif (Toolkit.TESTING) {\n\t\t\tToolkit.TESTING_UID++;\n\t\t\treturn \"\" + Toolkit.TESTING_UID;\n\t\t}\n\t\treturn \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\n\t\t\tconst r = (Math.random() * 16) | 0;\n\t\t\tconst v = c === \"x\" ? r : (r & 0x3) | 0x8;\n\t\t\treturn v.toString(16);\n\t\t});\n\t}\n\n\t/**\n\t * Finds the closest element as a polyfill\n\t *\n\t * @param  {Element} element  [description]\n\t * @param  {string}  selector [description]\n\t */\n\tpublic static closest(element: Element, selector: string) {\n\t\tif (document.body.closest) {\n\t\t\treturn element.closest(selector);\n\t\t}\n\t\treturn closest(element, selector);\n\t}\n\n\tpublic static generateLinePath(firstPoint: PointModel, lastPoint: PointModel): string {\n\t\treturn `M${firstPoint.x},${firstPoint.y} L ${lastPoint.x},${lastPoint.y}`;\n\t}\n\n\tpublic static generateCurvePath(firstPoint: PointModel, lastPoint: PointModel, curvy: number = 0): string {\n\t\tvar isHorizontal = Math.abs(firstPoint.x - lastPoint.x) > Math.abs(firstPoint.y - lastPoint.y);\n\t\tvar curvyX = isHorizontal ? curvy : 0;\n\t\tvar curvyY = isHorizontal ? 0 : curvy;\n\n\t\treturn `M${firstPoint.x},${firstPoint.y} C ${firstPoint.x + curvyX},${firstPoint.y + curvyY}\n    ${lastPoint.x - curvyX},${lastPoint.y - curvyY} ${lastPoint.x},${lastPoint.y}`;\n\t}\n\n\tpublic static generateDynamicPath(pathCoords: number[][]) {\n\t\tlet path = Path();\n\t\tpath = path.moveto(pathCoords[0][0] * ROUTING_SCALING_FACTOR, pathCoords[0][1] * ROUTING_SCALING_FACTOR);\n\t\tpathCoords.slice(1).forEach(coords => {\n\t\t\tpath = path.lineto(coords[0] * ROUTING_SCALING_FACTOR, coords[1] * ROUTING_SCALING_FACTOR);\n\t\t});\n\t\treturn path.print();\n\t}\n}\n","import { BaseEntity, BaseListener } from \"../BaseEntity\";\nimport * as _ from \"lodash\";\nimport { BaseEvent } from \"../BaseEntity\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport interface BaseModelListener extends BaseListener {\n\tselectionChanged?(event: BaseEvent<BaseModel> & { isSelected: boolean }): void;\n\n\tentityRemoved?(event: BaseEvent<BaseModel>): void;\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class BaseModel<\n\tX extends BaseEntity = BaseEntity,\n\tT extends BaseModelListener = BaseModelListener\n> extends BaseEntity<T> {\n\ttype: string;\n\tselected: boolean;\n\tparent: X;\n\n\tconstructor(type?: string, id?: string) {\n\t\tsuper(id);\n\t\tthis.type = type;\n\t\tthis.selected = false;\n\t}\n\n\tpublic getParent(): X {\n\t\treturn this.parent;\n\t}\n\n\tpublic setParent(parent: X) {\n\t\tthis.parent = parent;\n\t}\n\n\tpublic getSelectedEntities(): BaseModel<any, T>[] {\n\t\tif (this.isSelected()) {\n\t\t\treturn [this];\n\t\t}\n\t\treturn [];\n\t}\n\n\tpublic deSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.type = ob.type;\n\t\tthis.selected = ob.selected;\n\t}\n\n\tpublic serialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\ttype: this.type,\n\t\t\tselected: this.selected\n\t\t});\n\t}\n\n\tpublic getType(): string {\n\t\treturn this.type;\n\t}\n\n\tpublic getID(): string {\n\t\treturn this.id;\n\t}\n\n\tpublic isSelected(): boolean {\n\t\treturn this.selected;\n\t}\n\n\tpublic setSelected(selected: boolean = true) {\n\t\tthis.selected = selected;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.selectionChanged) {\n\t\t\t\tlistener.selectionChanged({ ...event, isSelected: selected });\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic remove() {\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.entityRemoved) {\n\t\t\t\tlistener.entityRemoved(event);\n\t\t\t}\n\t\t});\n\t}\n}\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { LinkModel } from \"./LinkModel\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport class PointModel extends BaseModel<LinkModel, BaseModelListener> {\n\tx: number;\n\ty: number;\n\n\tconstructor(link: LinkModel, points: { x: number; y: number }) {\n\t\tsuper();\n\t\tthis.x = points.x;\n\t\tthis.y = points.y;\n\t\tthis.parent = link;\n\t}\n\n\tgetSelectedEntities() {\n\t\tif (super.isSelected() && !this.isConnectedToPort()) {\n\t\t\treturn [this];\n\t\t}\n\t\treturn [];\n\t}\n\n\tisConnectedToPort(): boolean {\n\t\treturn this.parent.getPortForPoint(this) !== null;\n\t}\n\n\tgetLink(): LinkModel {\n\t\treturn this.getParent();\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.x = ob.x;\n\t\tthis.y = ob.y;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tx: this.x,\n\t\t\ty: this.y\n\t\t});\n\t}\n\n\tremove() {\n\t\t//clear references\n\t\tif (this.parent) {\n\t\t\tthis.parent.removePoint(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tupdateLocation(points: { x: number; y: number }) {\n\t\tthis.x = points.x;\n\t\tthis.y = points.y;\n\t}\n\n\tgetX(): number {\n\t\treturn this.x;\n\t}\n\n\tgetY(): number {\n\t\treturn this.y;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","/**\r\n * @namespace PF.Heuristic\r\n * @description A collection of heuristic functions.\r\n */\r\nmodule.exports = {\r\n\r\n  /**\r\n   * Manhattan distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} dx + dy\r\n   */\r\n  manhattan: function(dx, dy) {\r\n      return dx + dy;\r\n  },\r\n\r\n  /**\r\n   * Euclidean distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy)\r\n   */\r\n  euclidean: function(dx, dy) {\r\n      return Math.sqrt(dx * dx + dy * dy);\r\n  },\r\n\r\n  /**\r\n   * Octile distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy) for grids\r\n   */\r\n  octile: function(dx, dy) {\r\n      var F = Math.SQRT2 - 1;\r\n      return (dx < dy) ? F * dx + dy : F * dy + dx;\r\n  },\r\n\r\n  /**\r\n   * Chebyshev distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} max(dx, dy)\r\n   */\r\n  chebyshev: function(dx, dy) {\r\n      return Math.max(dx, dy);\r\n  }\r\n\r\n};\r\n","import { BaseEvent } from \"../BaseEntity\";\nimport { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { LinkModel, LinkModelListener } from \"./LinkModel\";\nimport { PortModel } from \"./PortModel\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { DiagramModel } from \"./DiagramModel\";\n\nexport interface NodeModelListener extends BaseModelListener {\n\tpositionChanged?(event: BaseEvent<NodeModel>): void;\n}\n\nexport class NodeModel<T extends NodeModelListener = NodeModelListener> extends BaseModel<DiagramModel, T> {\n\tx: number;\n\ty: number;\n\textras: any;\n\tports: { [s: string]: PortModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\n\tconstructor(nodeType: string = \"default\", id?: string) {\n\t\tsuper(nodeType, id);\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t\tthis.extras = {};\n\t\tthis.ports = {};\n\t}\n\n\tsetPosition(x, y) {\n\t\t//store position\n\t\tlet oldX = this.x;\n\t\tlet oldY = this.y;\n\t\t_.forEach(this.ports, port => {\n\t\t\t_.forEach(port.getLinks(), link => {\n\t\t\t\tlet point = link.getPointForPort(port);\n\t\t\t\tpoint.x = point.x + x - oldX;\n\t\t\t\tpoint.y = point.y + y - oldY;\n\t\t\t});\n\t\t});\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tpositionChanged() {\n\t\tthis.iterateListeners(\n\t\t\t(listener: NodeModelListener, event) => listener.positionChanged && listener.positionChanged(event)\n\t\t);\n\t}\n\n\tgetSelectedEntities() {\n\t\tlet entities: any[] = super.getSelectedEntities();\n\n\t\t// add the points of each link that are selected here\n\t\tif (this.isSelected()) {\n\t\t\t_.forEach(this.ports, port => {\n\t\t\t\tentities = entities.concat(\n\t\t\t\t\t_.map(port.getLinks(), link => {\n\t\t\t\t\t\treturn link.getPointForPort(port);\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\treturn entities;\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.x = ob.x;\n\t\tthis.y = ob.y;\n\t\tthis.extras = ob.extras;\n\n\t\t//deserialize ports\n\t\t_.forEach(ob.ports, (port: any) => {\n\t\t\tlet portOb = engine.getPortFactory(port.type).getNewInstance();\n\t\t\tportOb.deSerialize(port, engine);\n\t\t\tthis.addPort(portOb);\n\t\t});\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tx: this.x,\n\t\t\ty: this.y,\n\t\t\textras: this.extras,\n\t\t\tports: _.map(this.ports, port => {\n\t\t\t\treturn port.serialize();\n\t\t\t})\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\t// also clone the ports\n\t\tclone.ports = {};\n\t\t_.forEach(this.ports, port => {\n\t\t\tclone.addPort(port.clone(lookupTable));\n\t\t});\n\t}\n\n\tremove() {\n\t\tsuper.remove();\n\t\t_.forEach(this.ports, port => {\n\t\t\t_.forEach(port.getLinks(), link => {\n\t\t\t\tlink.remove();\n\t\t\t});\n\t\t});\n\t}\n\n\tgetPortFromID(id): PortModel | null {\n\t\tfor (var i in this.ports) {\n\t\t\tif (this.ports[i].id === id) {\n\t\t\t\treturn this.ports[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPort(name: string): PortModel | null {\n\t\treturn this.ports[name];\n\t}\n\n\tgetPorts(): { [s: string]: PortModel } {\n\t\treturn this.ports;\n\t}\n\n\tremovePort(port: PortModel) {\n\t\t//clear the parent node reference\n\t\tif (this.ports[port.name]) {\n\t\t\tthis.ports[port.name].setParent(null);\n\t\t\tdelete this.ports[port.name];\n\t\t}\n\t}\n\n\taddPort<T extends PortModel>(port: T): T {\n\t\tport.setParent(this);\n\t\tthis.ports[port.name] = port;\n\t\treturn port;\n\t}\n\n\tupdateDimensions({ width, height }: { width: number; height: number }) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n}\n","import { BaseModel } from \"../models/BaseModel\";\n\nexport abstract class AbstractFactory<T extends BaseModel> {\n\ttype: string;\n\n\tconstructor(name: string) {\n\t\tthis.type = name;\n\t}\n\n\tgetType(): string {\n\t\treturn this.type;\n\t}\n\n\tabstract getNewInstance(initialConfig?: any): T;\n}\n","import * as PF from \"pathfinding\";\nimport { DiagramEngine } from \"../main\";\n\n/*\nit can be very expensive to calculate routes when every single pixel on the canvas\nis individually represented. Using the factor below, we combine values in order\nto achieve the best trade-off between accuracy and performance.\n*/\nexport const ROUTING_SCALING_FACTOR = 5;\n\nconst pathFinderInstance = new PF.JumpPointFinder({\n\theuristic: PF.Heuristic.manhattan,\n\tdiagonalMovement: PF.DiagonalMovement.Never\n});\n\nexport default class PathFinding {\n\tinstance: any;\n\tdiagramEngine: DiagramEngine;\n\n\tconstructor(diagramEngine: DiagramEngine) {\n\t\tthis.instance = pathFinderInstance;\n\t\tthis.diagramEngine = diagramEngine;\n\t}\n\n\t/**\n\t * Taking as argument a fully unblocked walking matrix, this method\n\t * finds a direct path from point A to B.\n\t */\n\tcalculateDirectPath(\n\t\tfrom: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tto: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t}\n\t): number[][] {\n\t\tconst matrix = this.diagramEngine.getCanvasMatrix();\n\t\tconst grid = new PF.Grid(matrix);\n\n\t\treturn pathFinderInstance.findPath(\n\t\t\tthis.diagramEngine.translateRoutingX(Math.floor(from.x / ROUTING_SCALING_FACTOR)),\n\t\t\tthis.diagramEngine.translateRoutingY(Math.floor(from.y / ROUTING_SCALING_FACTOR)),\n\t\t\tthis.diagramEngine.translateRoutingX(Math.floor(to.x / ROUTING_SCALING_FACTOR)),\n\t\t\tthis.diagramEngine.translateRoutingY(Math.floor(to.y / ROUTING_SCALING_FACTOR)),\n\t\t\tgrid\n\t\t);\n\t}\n\n\t/**\n\t * Using @link{#calculateDirectPath}'s result as input, we here\n\t * determine the first walkable point found in the matrix that includes\n\t * blocked paths.\n\t */\n\tcalculateLinkStartEndCoords(\n\t\tmatrix: number[][],\n\t\tpath: number[][]\n\t): {\n\t\tstart: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t};\n\t\tend: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t};\n\t\tpathToStart: number[][];\n\t\tpathToEnd: number[][];\n\t} {\n\t\tconst startIndex = path.findIndex(point => matrix[point[1]][point[0]] === 0);\n\t\tconst endIndex =\n\t\t\tpath.length -\n\t\t\t1 -\n\t\t\tpath\n\t\t\t\t.slice()\n\t\t\t\t.reverse()\n\t\t\t\t.findIndex(point => matrix[point[1]][point[0]] === 0);\n\n\t\t// are we trying to create a path exclusively through blocked areas?\n\t\t// if so, let's fallback to the linear routing\n\t\tif (startIndex === -1 || endIndex === -1) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst pathToStart = path.slice(0, startIndex);\n\t\tconst pathToEnd = path.slice(endIndex);\n\n\t\treturn {\n\t\t\tstart: {\n\t\t\t\tx: path[startIndex][0],\n\t\t\t\ty: path[startIndex][1]\n\t\t\t},\n\t\t\tend: {\n\t\t\t\tx: path[endIndex][0],\n\t\t\t\ty: path[endIndex][1]\n\t\t\t},\n\t\t\tpathToStart,\n\t\t\tpathToEnd\n\t\t};\n\t}\n\n\t/**\n\t * Puts everything together: merges the paths from/to the centre of the ports,\n\t * with the path calculated around other elements.\n\t */\n\tcalculateDynamicPath(\n\t\troutingMatrix: number[][],\n\t\tstart: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tend: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tpathToStart: number[][],\n\t\tpathToEnd: number[][]\n\t) {\n\t\t// generate the path based on the matrix with obstacles\n\t\tconst grid = new PF.Grid(routingMatrix);\n\t\tconst dynamicPath = pathFinderInstance.findPath(start.x, start.y, end.x, end.y, grid);\n\n\t\t// aggregate everything to have the calculated path ready for rendering\n\t\tconst pathCoords = pathToStart\n\t\t\t.concat(dynamicPath, pathToEnd)\n\t\t\t.map(coords => [\n\t\t\t\tthis.diagramEngine.translateRoutingX(coords[0], true),\n\t\t\t\tthis.diagramEngine.translateRoutingY(coords[1], true)\n\t\t\t]);\n\t\treturn PF.Util.compressPath(pathCoords);\n\t}\n}\n","module.exports = require('./lib/heap');\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Base class for the Jump Point Search algorithm\r\n * @param {object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction JumpPointFinderBase(opt) {\r\n    opt = opt || {};\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.trackJumpRecursion = opt.trackJumpRecursion || false;\r\n}\r\n\r\n/**\r\n * Find and return the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nJumpPointFinderBase.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = this.openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = this.startNode = grid.getNodeAt(startX, startY),\r\n        endNode = this.endNode = grid.getNodeAt(endX, endY), node;\r\n\r\n    this.grid = grid;\r\n\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        if (node === endNode) {\r\n            return Util.expandPath(Util.backtrace(endNode));\r\n        }\r\n\r\n        this._identifySuccessors(node);\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\n/**\r\n * Identify successors for the given node. Runs a jump point search in the\r\n * direction of each available neighbor, adding any points found to the open\r\n * list.\r\n * @protected\r\n */\r\nJumpPointFinderBase.prototype._identifySuccessors = function(node) {\r\n    var grid = this.grid,\r\n        heuristic = this.heuristic,\r\n        openList = this.openList,\r\n        endX = this.endNode.x,\r\n        endY = this.endNode.y,\r\n        neighbors, neighbor,\r\n        jumpPoint, i, l,\r\n        x = node.x, y = node.y,\r\n        jx, jy, dx, dy, d, ng, jumpNode,\r\n        abs = Math.abs, max = Math.max;\r\n\r\n    neighbors = this._findNeighbors(node);\r\n    for(i = 0, l = neighbors.length; i < l; ++i) {\r\n        neighbor = neighbors[i];\r\n        jumpPoint = this._jump(neighbor[0], neighbor[1], x, y);\r\n        if (jumpPoint) {\r\n\r\n            jx = jumpPoint[0];\r\n            jy = jumpPoint[1];\r\n            jumpNode = grid.getNodeAt(jx, jy);\r\n\r\n            if (jumpNode.closed) {\r\n                continue;\r\n            }\r\n\r\n            // include distance, as parent may not be immediately adjacent:\r\n            d = Heuristic.octile(abs(jx - x), abs(jy - y));\r\n            ng = node.g + d; // next `g` value\r\n\r\n            if (!jumpNode.opened || ng < jumpNode.g) {\r\n                jumpNode.g = ng;\r\n                jumpNode.h = jumpNode.h || heuristic(abs(jx - endX), abs(jy - endY));\r\n                jumpNode.f = jumpNode.g + jumpNode.h;\r\n                jumpNode.parent = node;\r\n\r\n                if (!jumpNode.opened) {\r\n                    openList.push(jumpNode);\r\n                    jumpNode.opened = true;\r\n                } else {\r\n                    openList.updateItem(jumpNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = JumpPointFinderBase;\r\n","import { Toolkit } from \"./Toolkit\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"./DiagramEngine\";\n\n/**\n * @author Dylan Vorster\n */\nexport interface BaseEvent<T extends BaseEntity = any> {\n\tentity: BaseEntity<BaseListener>;\n\tstopPropagation: () => any;\n\tfiring: boolean;\n\tid: string;\n}\n\nexport interface BaseListener<T extends BaseEntity = any> {\n\tlockChanged?(event: BaseEvent<T> & { locked: boolean }): void;\n}\n\nexport type BaseEntityType = \"node\" | \"link\" | \"port\" | \"point\";\n\nexport class BaseEntity<T extends BaseListener = BaseListener> {\n\tpublic listeners: { [s: string]: T };\n\tpublic id: string;\n\tpublic locked: boolean;\n\n\tconstructor(id?: string) {\n\t\tthis.listeners = {};\n\t\tthis.id = id || Toolkit.UID();\n\t\tthis.locked = false;\n\t}\n\n\tgetID() {\n\t\treturn this.id;\n\t}\n\n\tdoClone(lookupTable: { [s: string]: any } = {}, clone: any) {\n\t\t/*noop*/\n\t}\n\n\tclone(lookupTable: { [s: string]: any } = {}) {\n\t\t// try and use an existing clone first\n\t\tif (lookupTable[this.id]) {\n\t\t\treturn lookupTable[this.id];\n\t\t}\n\t\tlet clone = _.clone(this);\n\t\tclone.id = Toolkit.UID();\n\t\tclone.clearListeners();\n\t\tlookupTable[this.id] = clone;\n\n\t\tthis.doClone(lookupTable, clone);\n\t\treturn clone;\n\t}\n\n\tclearListeners() {\n\t\tthis.listeners = {};\n\t}\n\n\tpublic deSerialize(data: { [s: string]: any }, engine: DiagramEngine) {\n\t\tthis.id = data.id;\n\t}\n\n\tpublic serialize() {\n\t\treturn {\n\t\t\tid: this.id\n\t\t};\n\t}\n\n\tpublic iterateListeners(cb: (t: T, event: BaseEvent) => any) {\n\t\tlet event: BaseEvent = {\n\t\t\tid: Toolkit.UID(),\n\t\t\tfiring: true,\n\t\t\tentity: this,\n\t\t\tstopPropagation: () => {\n\t\t\t\tevent.firing = false;\n\t\t\t}\n\t\t};\n\n\t\tfor (var i in this.listeners) {\n\t\t\tif (this.listeners.hasOwnProperty(i)) {\n\t\t\t\t// propagation stopped\n\t\t\t\tif (!event.firing) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcb(this.listeners[i], event);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic removeListener(listener: string) {\n\t\tif (this.listeners[listener]) {\n\t\t\tdelete this.listeners[listener];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic addListener(listener: T): string {\n\t\tvar uid = Toolkit.UID();\n\t\tthis.listeners[uid] = listener;\n\t\treturn uid;\n\t}\n\n\tpublic isLocked(): boolean {\n\t\treturn this.locked;\n\t}\n\n\tpublic setLocked(locked: boolean = true) {\n\t\tthis.locked = locked;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.lockChanged) {\n\t\t\t\tlistener.lockChanged({ ...event, locked: locked });\n\t\t\t}\n\t\t});\n\t}\n}\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { NodeModel } from \"./NodeModel\";\nimport { LinkModel } from \"./LinkModel\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport class PortModel extends BaseModel<NodeModel, BaseModelListener> {\n\tname: string;\n\tlinks: { [id: string]: LinkModel };\n\tmaximumLinks: number;\n\n\t// calculated post rendering so routing can be done correctly\n\tx: number;\n\ty: number;\n\twidth: number;\n\theight: number;\n\n\tconstructor(name: string, type?: string, id?: string, maximumLinks?: number) {\n\t\tsuper(type, id);\n\t\tthis.name = name;\n\t\tthis.links = {};\n\t\tthis.maximumLinks = maximumLinks;\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.name = ob.name;\n\t\tthis.maximumLinks = ob.maximumLinks;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tparentNode: this.parent.id,\n\t\t\tlinks: _.map(this.links, link => {\n\t\t\t\treturn link.id;\n\t\t\t}),\n\t\t\tmaximumLinks: this.maximumLinks\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.links = {};\n\t\tclone.parentNode = this.getParent().clone(lookupTable);\n\t}\n\n\tgetNode(): NodeModel {\n\t\treturn this.getParent();\n\t}\n\n\tgetName(): string {\n\t\treturn this.name;\n\t}\n\n\tgetMaximumLinks(): number {\n\t\treturn this.maximumLinks;\n\t}\n\n\tsetMaximumLinks(maximumLinks: number) {\n\t\tthis.maximumLinks = maximumLinks;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tdelete this.links[link.getID()];\n\t}\n\n\taddLink(link: LinkModel) {\n\t\tthis.links[link.getID()] = link;\n\t}\n\n\tgetLinks(): { [id: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tpublic createLinkModel(): LinkModel | null {\n\t\tif (_.isFinite(this.maximumLinks)) {\n\t\t\tvar numberOfLinks: number = _.size(this.links);\n\t\t\tif (this.maximumLinks === 1 && numberOfLinks >= 1) {\n\t\t\t\treturn _.values(this.links)[0];\n\t\t\t} else if (numberOfLinks >= this.maximumLinks) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tupdateCoords({ x, y, width, height }: { x: number; y: number; width: number; height: number }) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n","export class BaseAction {\n\tmouseX: number;\n\tmouseY: number;\n\tms: number;\n\n\tconstructor(mouseX: number, mouseY: number) {\n\t\tthis.mouseX = mouseX;\n\t\tthis.mouseY = mouseY;\n\t\tthis.ms = new Date().getTime();\n\t}\n}\n","/**\r\n * A node in grid. \r\n * This class holds some basic information about a node and custom \r\n * attributes may be added, depending on the algorithms' needs.\r\n * @constructor\r\n * @param {number} x - The x coordinate of the node on the grid.\r\n * @param {number} y - The y coordinate of the node on the grid.\r\n * @param {boolean} [walkable] - Whether this node is walkable.\r\n */\r\nfunction Node(x, y, walkable) {\r\n    /**\r\n     * The x coordinate of the node on the grid.\r\n     * @type number\r\n     */\r\n    this.x = x;\r\n    /**\r\n     * The y coordinate of the node on the grid.\r\n     * @type number\r\n     */\r\n    this.y = y;\r\n    /**\r\n     * Whether this node can be walked through.\r\n     * @type boolean\r\n     */\r\n    this.walkable = (walkable === undefined ? true : walkable);\r\n}\r\n\r\nmodule.exports = Node;\r\n","var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder. Based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching \r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction AStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    //admissible. It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        // if reached the end position, construct the path and return it\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    openList.push(neighbor);\r\n                    neighbor.opened = true;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    openList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = AStarFinder;\r\n","var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder.\r\n * based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction BiAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    //When diagonal movement is allowed the manhattan heuristic is not admissible\r\n    //It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var cmp = function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        },\r\n        startOpenList = new Heap(cmp),\r\n        endOpenList = new Heap(cmp),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng,\r\n        BY_START = 1, BY_END = 2;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    // and push it into the start open list\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n    startOpenList.push(startNode);\r\n    startNode.opened = BY_START;\r\n\r\n    // set the `g` and `f` value of the end node to be 0\r\n    // and push it into the open open list\r\n    endNode.g = 0;\r\n    endNode.f = 0;\r\n    endOpenList.push(endNode);\r\n    endNode.opened = BY_END;\r\n\r\n    // while both the open lists are not empty\r\n    while (!startOpenList.empty() && !endOpenList.empty()) {\r\n\r\n        // pop the position of start node which has the minimum `f` value.\r\n        node = startOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_END) {\r\n                return Util.biBacktrace(node, neighbor);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    startOpenList.push(neighbor);\r\n                    neighbor.opened = BY_START;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    startOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n\r\n\r\n        // pop the position of end node which has the minimum `f` value.\r\n        node = endOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_START) {\r\n                return Util.biBacktrace(neighbor, node);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - startX), abs(y - startY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    endOpenList.push(neighbor);\r\n                    neighbor.opened = BY_END;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    endOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiAStarFinder;\r\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { PortModel } from \"./PortModel\";\nimport { PointModel } from \"./PointModel\";\nimport * as _ from \"lodash\";\nimport { BaseEvent } from \"../BaseEntity\";\nimport { LabelModel } from \"./LabelModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { DiagramModel } from \"./DiagramModel\";\n\nexport interface LinkModelListener extends BaseModelListener {\n\tsourcePortChanged?(event: BaseEvent<LinkModel> & { port: null | PortModel }): void;\n\n\ttargetPortChanged?(event: BaseEvent<LinkModel> & { port: null | PortModel }): void;\n}\n\nexport class LinkModel<T extends LinkModelListener = LinkModelListener> extends BaseModel<DiagramModel, T> {\n\tsourcePort: PortModel | null;\n\ttargetPort: PortModel | null;\n\tlabels: LabelModel[];\n\tpoints: PointModel[];\n\textras: any;\n\n\tconstructor(linkType: string = \"default\", id?: string) {\n\t\tsuper(linkType, id);\n\t\tthis.points = [new PointModel(this, { x: 0, y: 0 }), new PointModel(this, { x: 0, y: 0 })];\n\t\tthis.extras = {};\n\t\tthis.sourcePort = null;\n\t\tthis.targetPort = null;\n\t\tthis.labels = [];\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.extras = ob.extras;\n\t\tthis.points = _.map(ob.points || [], (point: { x; y }) => {\n\t\t\tvar p = new PointModel(this, { x: point.x, y: point.y });\n\t\t\tp.deSerialize(point, engine);\n\t\t\treturn p;\n\t\t});\n\n\t\t//deserialize labels\n\t\t_.forEach(ob.labels || [], (label: any) => {\n\t\t\tlet labelOb = engine.getLabelFactory(label.type).getNewInstance();\n\t\t\tlabelOb.deSerialize(label, engine);\n\t\t\tthis.addLabel(labelOb);\n\t\t});\n\n\t\tif (ob.target) {\n\t\t\tthis.setTargetPort(\n\t\t\t\tthis.getParent()\n\t\t\t\t\t.getNode(ob.target)\n\t\t\t\t\t.getPortFromID(ob.targetPort)\n\t\t\t);\n\t\t}\n\n\t\tif (ob.source) {\n\t\t\tthis.setSourcePort(\n\t\t\t\tthis.getParent()\n\t\t\t\t\t.getNode(ob.source)\n\t\t\t\t\t.getPortFromID(ob.sourcePort)\n\t\t\t);\n\t\t}\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tsource: this.sourcePort ? this.sourcePort.getParent().id : null,\n\t\t\tsourcePort: this.sourcePort ? this.sourcePort.id : null,\n\t\t\ttarget: this.targetPort ? this.targetPort.getParent().id : null,\n\t\t\ttargetPort: this.targetPort ? this.targetPort.id : null,\n\t\t\tpoints: _.map(this.points, point => {\n\t\t\t\treturn point.serialize();\n\t\t\t}),\n\t\t\textras: this.extras,\n\t\t\tlabels: _.map(this.labels, label => {\n\t\t\t\treturn label.serialize();\n\t\t\t})\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.setPoints(\n\t\t\t_.map(this.getPoints(), (point: PointModel) => {\n\t\t\t\treturn point.clone(lookupTable);\n\t\t\t})\n\t\t);\n\t\tif (this.sourcePort) {\n\t\t\tclone.setSourcePort(this.sourcePort.clone(lookupTable));\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tclone.setTargetPort(this.targetPort.clone(lookupTable));\n\t\t}\n\t}\n\n\tremove() {\n\t\tif (this.sourcePort) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tisLastPoint(point: PointModel) {\n\t\tvar index = this.getPointIndex(point);\n\t\treturn index === this.points.length - 1;\n\t}\n\n\tgetPointIndex(point: PointModel) {\n\t\treturn this.points.indexOf(point);\n\t}\n\n\tgetPointModel(id: string): PointModel | null {\n\t\tfor (var i = 0; i < this.points.length; i++) {\n\t\t\tif (this.points[i].id === id) {\n\t\t\t\treturn this.points[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPortForPoint(point: PointModel): PortModel {\n\t\tif (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n\t\t\treturn this.sourcePort;\n\t\t}\n\t\tif (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n\t\t\treturn this.targetPort;\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPointForPort(port: PortModel): PointModel {\n\t\tif (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n\t\t\treturn this.getFirstPoint();\n\t\t}\n\t\tif (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n\t\t\treturn this.getLastPoint();\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetFirstPoint(): PointModel {\n\t\treturn this.points[0];\n\t}\n\n\tgetLastPoint(): PointModel {\n\t\treturn this.points[this.points.length - 1];\n\t}\n\n\tsetSourcePort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.sourcePort !== null) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tthis.sourcePort = port;\n\t\tthis.iterateListeners((listener: LinkModelListener, event) => {\n\t\t\tif (listener.sourcePortChanged) {\n\t\t\t\tlistener.sourcePortChanged({ ...event, port: port });\n\t\t\t}\n\t\t});\n\t}\n\n\tgetSourcePort(): PortModel {\n\t\treturn this.sourcePort;\n\t}\n\n\tgetTargetPort(): PortModel {\n\t\treturn this.targetPort;\n\t}\n\n\tsetTargetPort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.targetPort !== null) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tthis.targetPort = port;\n\t\tthis.iterateListeners((listener: LinkModelListener, event) => {\n\t\t\tif (listener.targetPortChanged) {\n\t\t\t\tlistener.targetPortChanged({ ...event, port: port });\n\t\t\t}\n\t\t});\n\t}\n\n\tpoint(x: number, y: number): PointModel {\n\t\treturn this.addPoint(this.generatePoint(x, y));\n\t}\n\n\taddLabel(label: LabelModel) {\n\t\tlabel.setParent(this);\n\t\tthis.labels.push(label);\n\t}\n\n\tgetPoints(): PointModel[] {\n\t\treturn this.points;\n\t}\n\n\tsetPoints(points: PointModel[]) {\n\t\t_.forEach(points, point => {\n\t\t\tpoint.setParent(this);\n\t\t});\n\t\tthis.points = points;\n\t}\n\n\tremovePoint(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel), 1);\n\t}\n\n\tremovePointsBefore(pointModel: PointModel) {\n\t\tthis.points.splice(0, this.getPointIndex(pointModel));\n\t}\n\n\tremovePointsAfter(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel) + 1);\n\t}\n\n\tremoveMiddlePoints() {\n\t\tif (this.points.length > 2) {\n\t\t\tthis.points.splice(0, this.points.length - 2);\n\t\t}\n\t}\n\n\taddPoint<P extends PointModel>(pointModel: P, index = 1): P {\n\t\tpointModel.setParent(this);\n\t\tthis.points.splice(index, 0, pointModel);\n\t\treturn pointModel;\n\t}\n\n\tgeneratePoint(x: number = 0, y: number = 0): PointModel {\n\t\treturn new PointModel(this, { x: x, y: y });\n\t}\n}\n","import * as _ from \"lodash\";\nimport { PortModel } from \"../../models/PortModel\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { DefaultLinkModel } from \"./DefaultLinkModel\";\nimport { LinkModel } from \"../../models/LinkModel\";\n\nexport class DefaultPortModel extends PortModel {\n\tin: boolean;\n\tlabel: string;\n\tlinks: { [id: string]: DefaultLinkModel };\n\n\tconstructor(isInput: boolean, name: string, label: string = null, id?: string) {\n\t\tsuper(name, \"default\", id);\n\t\tthis.in = isInput;\n\t\tthis.label = label || name;\n\t}\n\n\tdeSerialize(object, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.in = object.in;\n\t\tthis.label = object.label;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tin: this.in,\n\t\t\tlabel: this.label\n\t\t});\n\t}\n\n\tlink(port: PortModel): LinkModel {\n\t\tlet link = this.createLinkModel();\n\t\tlink.setSourcePort(this);\n\t\tlink.setTargetPort(port);\n\t\treturn link;\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\tif (port instanceof DefaultPortModel) {\n\t\t\treturn this.in !== port.in;\n\t\t}\n\t\treturn true;\n\t}\n\n\tcreateLinkModel(): LinkModel {\n\t\tlet link = super.createLinkModel();\n\t\treturn link || new DefaultLinkModel();\n\t}\n}\n","/**\n * @author Dylan Vorster\n */\nimport { LinkModel, LinkModelListener } from \"../../models/LinkModel\";\nimport { BaseEvent } from \"../../BaseEntity\";\nimport * as _ from \"lodash\";\nimport { PointModel } from \"../../models/PointModel\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { DefaultLabelModel } from \"./DefaultLabelModel\";\nimport { LabelModel } from \"../../models/LabelModel\";\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n\tcolorChanged?(event: BaseEvent<DefaultLinkModel> & { color: null | string }): void;\n\n\twidthChanged?(event: BaseEvent<DefaultLinkModel> & { width: 0 | number }): void;\n}\n\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelListener> {\n\twidth: number;\n\tcolor: string;\n\tcurvyness: number;\n\n\tconstructor(type: string = \"default\") {\n\t\tsuper(type);\n\t\tthis.color = \"rgba(255,255,255,0.5)\";\n\t\tthis.width = 3;\n\t\tthis.curvyness = 50;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\twidth: this.width,\n\t\t\tcolor: this.color,\n\t\t\tcurvyness: this.curvyness\n\t\t});\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.color = ob.color;\n\t\tthis.width = ob.width;\n\t\tthis.curvyness = ob.curvyness;\n\t}\n\n\taddLabel(label: LabelModel | string) {\n\t\tif (label instanceof LabelModel) {\n\t\t\treturn super.addLabel(label);\n\t\t}\n\t\tlet labelOb = new DefaultLabelModel();\n\t\tlabelOb.setLabel(label);\n\t\treturn super.addLabel(labelOb);\n\t}\n\n\tsetWidth(width: number) {\n\t\tthis.width = width;\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\n\t\t\tif (listener.widthChanged) {\n\t\t\t\tlistener.widthChanged({ ...event, width: width });\n\t\t\t}\n\t\t});\n\t}\n\n\tsetColor(color: string) {\n\t\tthis.color = color;\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\n\t\t\tif (listener.colorChanged) {\n\t\t\t\tlistener.colorChanged({ ...event, color: color });\n\t\t\t}\n\t\t});\n\t}\n}\n","import { LabelModel } from \"../../models/LabelModel\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\n\nexport class DefaultLabelModel extends LabelModel {\n\tlabel: string;\n\n\tconstructor() {\n\t\tsuper(\"default\");\n\t\tthis.offsetY = -23;\n\t}\n\n\tsetLabel(label: string) {\n\t\tthis.label = label;\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.label = ob.label;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tlabel: this.label\n\t\t});\n\t}\n}\n","import { BaseModel } from \"./BaseModel\";\nimport { LinkModel } from \"./LinkModel\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport class LabelModel extends BaseModel<LinkModel> {\n\toffsetX: number;\n\toffsetY: number;\n\n\tconstructor(type?: string, id?: string) {\n\t\tsuper(type, id);\n\t\tthis.offsetX = 0;\n\t\tthis.offsetY = 0;\n\t}\n\n\tdeSerialize(ob, engine: DiagramEngine) {\n\t\tsuper.deSerialize(ob, engine);\n\t\tthis.offsetX = ob.offsetX;\n\t\tthis.offsetY = ob.offsetY;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\toffsetX: this.offsetX,\n\t\t\toffsetY: this.offsetY\n\t\t});\n\t}\n}\n","/**\n * @author Dylan Vorster\n */\n\nexport * from \"./Toolkit\";\nexport * from \"./BaseEntity\";\nexport * from \"./DiagramEngine\";\n\nexport * from \"./defaults/models/DefaultNodeModel\";\nexport * from \"./defaults/models/DefaultPortModel\";\nexport * from \"./defaults/models/DefaultLinkModel\";\nexport * from \"./defaults/models/DefaultLabelModel\";\n\nexport * from \"./defaults/factories/DefaultLinkFactory\";\nexport * from \"./defaults/factories/DefaultNodeFactory\";\nexport * from \"./defaults/factories/DefaultPortFactory\";\nexport * from \"./defaults/factories/DefaultLabelFactory\";\n\nexport * from \"./defaults/widgets/DefaultLinkWidget\";\nexport * from \"./defaults/widgets/DefaultLabelWidget\";\nexport * from \"./defaults/widgets/DefaultNodeWidget\";\nexport * from \"./defaults/widgets/DefaultPortLabelWidget\";\n\nexport * from \"./factories/AbstractFactory\";\nexport * from \"./factories/AbstractLabelFactory\";\nexport * from \"./factories/AbstractLinkFactory\";\nexport * from \"./factories/AbstractNodeFactory\";\nexport * from \"./factories/AbstractPortFactory\";\n\nexport * from \"./routing/PathFinding\";\n\nexport * from \"./actions/BaseAction\";\nexport * from \"./actions/MoveCanvasAction\";\nexport * from \"./actions/MoveItemsAction\";\nexport * from \"./actions/SelectingAction\";\n\nexport * from \"./models/SelectionModel\";\nexport * from \"./models/BaseModel\";\nexport * from \"./models/DiagramModel\";\nexport * from \"./models/LinkModel\";\nexport * from \"./models/NodeModel\";\nexport * from \"./models/PointModel\";\nexport * from \"./models/PortModel\";\nexport * from \"./models/LabelModel\";\n\nexport * from \"./widgets/DiagramWidget\";\nexport * from \"./widgets/LinkWidget\";\nexport * from \"./widgets/NodeWidget\";\nexport * from \"./widgets/PortWidget\";\nexport * from \"./widgets/BaseWidget\";\n\nexport * from \"./widgets/layers/LinkLayerWidget\";\nexport * from \"./widgets/layers/NodeLayerWidget\";\n","import { BaseListener, BaseEntity, BaseEvent, BaseEntityType } from \"../BaseEntity\";\nimport * as _ from \"lodash\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { LinkModel } from \"./LinkModel\";\nimport { NodeModel } from \"./NodeModel\";\nimport { PortModel } from \"./PortModel\";\nimport { BaseModel, BaseModelListener } from \"./BaseModel\";\nimport { PointModel } from \"./PointModel\";\n/**\n * @author Dylan Vorster\n *\n */\nexport interface DiagramListener extends BaseListener {\n\tnodesUpdated?(event: BaseEvent & { node: NodeModel; isCreated: boolean }): void;\n\n\tlinksUpdated?(event: BaseEvent & { link: LinkModel; isCreated: boolean }): void;\n\n\toffsetUpdated?(event: BaseEvent<DiagramModel> & { offsetX: number; offsetY: number }): void;\n\n\tzoomUpdated?(event: BaseEvent<DiagramModel> & { zoom: number }): void;\n\n\tgridUpdated?(event: BaseEvent<DiagramModel> & { size: number }): void;\n}\n\n/**\n *\n */\nexport class DiagramModel extends BaseEntity<DiagramListener> {\n\t//models\n\tlinks: { [s: string]: LinkModel };\n\tnodes: { [s: string]: NodeModel };\n\n\t//control variables\n\toffsetX: number;\n\toffsetY: number;\n\tzoom: number;\n\trendered: boolean;\n\tgridSize: number;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.links = {};\n\t\tthis.nodes = {};\n\n\t\tthis.offsetX = 0;\n\t\tthis.offsetY = 0;\n\t\tthis.zoom = 100;\n\t\tthis.rendered = false;\n\t\tthis.gridSize = 0;\n\t}\n\n\tsetGridSize(size: number = 0) {\n\t\tthis.gridSize = size;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.gridUpdated) {\n\t\t\t\tlistener.gridUpdated({ ...event, size: size });\n\t\t\t}\n\t\t});\n\t}\n\n\tgetGridPosition(pos) {\n\t\tif (this.gridSize === 0) {\n\t\t\treturn pos;\n\t\t}\n\t\treturn this.gridSize * Math.floor((pos + this.gridSize / 2) / this.gridSize);\n\t}\n\n\tdeSerializeDiagram(object: any, diagramEngine: DiagramEngine) {\n\t\tthis.deSerialize(object, diagramEngine);\n\n\t\tthis.offsetX = object.offsetX;\n\t\tthis.offsetY = object.offsetY;\n\t\tthis.zoom = object.zoom;\n\t\tthis.gridSize = object.gridSize;\n\n\t\t// deserialize nodes\n\t\t_.forEach(object.nodes, (node: any) => {\n\t\t\tlet nodeOb = diagramEngine.getNodeFactory(node.type).getNewInstance(node);\n\t\t\tnodeOb.setParent(this);\n\t\t\tnodeOb.deSerialize(node, diagramEngine);\n\t\t\tthis.addNode(nodeOb);\n\t\t});\n\n\t\t// deserialze links\n\t\t_.forEach(object.links, (link: any) => {\n\t\t\tlet linkOb = diagramEngine.getLinkFactory(link.type).getNewInstance();\n\t\t\tlinkOb.setParent(this);\n\t\t\tlinkOb.deSerialize(link, diagramEngine);\n\t\t\tthis.addLink(linkOb);\n\t\t});\n\t}\n\n\tserializeDiagram() {\n\t\treturn _.merge(this.serialize(), {\n\t\t\toffsetX: this.offsetX,\n\t\t\toffsetY: this.offsetY,\n\t\t\tzoom: this.zoom,\n\t\t\tgridSize: this.gridSize,\n\t\t\tlinks: _.map(this.links, link => {\n\t\t\t\treturn link.serialize();\n\t\t\t}),\n\t\t\tnodes: _.map(this.nodes, node => {\n\t\t\t\treturn node.serialize();\n\t\t\t})\n\t\t});\n\t}\n\n\tclearSelection(ignore: BaseModel<BaseEntity, BaseModelListener> | null = null) {\n\t\t_.forEach(this.getSelectedItems(), element => {\n\t\t\tif (ignore && ignore.getID() === element.getID()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telement.setSelected(false); //TODO dont fire the listener\n\t\t});\n\t}\n\n\tgetSelectedItems(...filters: BaseEntityType[]): BaseModel<BaseEntity, BaseModelListener>[] {\n\t\tif (!Array.isArray(filters)) {\n\t\t\tfilters = [filters];\n\t\t}\n\t\tvar items = [];\n\n\t\t// run through nodes\n\t\titems = items.concat(\n\t\t\t_.flatMap(this.nodes, node => {\n\t\t\t\treturn node.getSelectedEntities();\n\t\t\t})\n\t\t);\n\n\t\t// find all the links\n\t\titems = items.concat(\n\t\t\t_.flatMap(this.links, link => {\n\t\t\t\treturn link.getSelectedEntities();\n\t\t\t})\n\t\t);\n\n\t\t//find all points\n\t\titems = items.concat(\n\t\t\t_.flatMap(this.links, link => {\n\t\t\t\treturn _.flatMap(link.points, point => {\n\t\t\t\t\treturn point.getSelectedEntities();\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\n\t\titems = _.uniq(items);\n\n\t\tif (filters.length > 0) {\n\t\t\titems = _.filter(_.uniq(items), (item: BaseModel<any>) => {\n\t\t\t\tif (_.includes(filters, \"node\") && item instanceof NodeModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (_.includes(filters, \"link\") && item instanceof LinkModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (_.includes(filters, \"port\") && item instanceof PortModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (_.includes(filters, \"point\") && item instanceof PointModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\t\treturn items;\n\t}\n\n\tsetZoomLevel(zoom: number) {\n\t\tthis.zoom = zoom;\n\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.zoomUpdated) {\n\t\t\t\tlistener.zoomUpdated({ ...event, zoom: zoom });\n\t\t\t}\n\t\t});\n\t}\n\n\tsetOffset(offsetX: number, offsetY: number) {\n\t\tthis.offsetX = offsetX;\n\t\tthis.offsetY = offsetY;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.offsetUpdated) {\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: offsetX, offsetY: offsetY });\n\t\t\t}\n\t\t});\n\t}\n\n\tsetOffsetX(offsetX: number) {\n\t\tthis.offsetX = offsetX;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.offsetUpdated) {\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: offsetX, offsetY: this.offsetY });\n\t\t\t}\n\t\t});\n\t}\n\tsetOffsetY(offsetY: number) {\n\t\tthis.offsetY = offsetY;\n\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.offsetUpdated) {\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: this.offsetX, offsetY: this.offsetY });\n\t\t\t}\n\t\t});\n\t}\n\n\tgetOffsetY() {\n\t\treturn this.offsetY;\n\t}\n\n\tgetOffsetX() {\n\t\treturn this.offsetX;\n\t}\n\n\tgetZoomLevel() {\n\t\treturn this.zoom;\n\t}\n\n\tgetNode(node: string | NodeModel): NodeModel | null {\n\t\tif (node instanceof NodeModel) {\n\t\t\treturn node;\n\t\t}\n\t\tif (!this.nodes[node]) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.nodes[node];\n\t}\n\n\tgetLink(link: string | LinkModel): LinkModel | null {\n\t\tif (link instanceof LinkModel) {\n\t\t\treturn link;\n\t\t}\n\t\tif (!this.links[link]) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.links[link];\n\t}\n\n\taddAll(...models: BaseModel[]): BaseModel[] {\n\t\t_.forEach(models, model => {\n\t\t\tif (model instanceof LinkModel) {\n\t\t\t\tthis.addLink(model);\n\t\t\t} else if (model instanceof NodeModel) {\n\t\t\t\tthis.addNode(model);\n\t\t\t}\n\t\t});\n\t\treturn models;\n\t}\n\n\taddLink(link: LinkModel): LinkModel {\n\t\tlink.addListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\tthis.removeLink(link);\n\t\t\t}\n\t\t});\n\t\tthis.links[link.getID()] = link;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.linksUpdated) {\n\t\t\t\tlistener.linksUpdated({ ...event, link: link, isCreated: true });\n\t\t\t}\n\t\t});\n\t\treturn link;\n\t}\n\n\taddNode(node: NodeModel): NodeModel {\n\t\tnode.addListener({\n\t\t\tentityRemoved: () => {\n\t\t\t\tthis.removeNode(node);\n\t\t\t}\n\t\t});\n\t\tthis.nodes[node.getID()] = node;\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.nodesUpdated) {\n\t\t\t\tlistener.nodesUpdated({ ...event, node: node, isCreated: true });\n\t\t\t}\n\t\t});\n\t\treturn node;\n\t}\n\n\tremoveLink(link: LinkModel | string) {\n\t\tlink = this.getLink(link);\n\t\tdelete this.links[link.getID()];\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.linksUpdated) {\n\t\t\t\tlistener.linksUpdated({ ...event, link: link as LinkModel, isCreated: false });\n\t\t\t}\n\t\t});\n\t}\n\n\tremoveNode(node: NodeModel | string) {\n\t\tnode = this.getNode(node);\n\t\tdelete this.nodes[node.getID()];\n\t\tthis.iterateListeners((listener, event) => {\n\t\t\tif (listener.nodesUpdated) {\n\t\t\t\tlistener.nodesUpdated({ ...event, node: node as NodeModel, isCreated: false });\n\t\t\t}\n\t\t});\n\t}\n\n\tgetLinks(): { [s: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tgetNodes(): { [s: string]: NodeModel } {\n\t\treturn this.nodes;\n\t}\n}\n","import { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport { AbstractPortFactory } from \"../../factories/AbstractPortFactory\";\n\nexport class DefaultPortFactory extends AbstractPortFactory<DefaultPortModel> {\n\tconstructor() {\n\t\tsuper(\"default\");\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultPortModel {\n\t\treturn new DefaultPortModel(true, \"unknown\");\n\t}\n}\n","import { PortModel } from \"../models/PortModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { AbstractFactory } from \"./AbstractFactory\";\n\nexport abstract class AbstractPortFactory<T extends PortModel = PortModel> extends AbstractFactory<T> {}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { AbstractLabelFactory } from \"../../factories/AbstractLabelFactory\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport { DefaultLabelWidget } from \"../widgets/DefaultLabelWidget\";\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultLabelFactory extends AbstractLabelFactory<DefaultLabelModel> {\n\tconstructor() {\n\t\tsuper(\"default\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, label: DefaultLabelModel): JSX.Element {\n\t\treturn <DefaultLabelWidget model={label} />;\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultLabelModel {\n\t\treturn new DefaultLabelModel();\n\t}\n}\n","import { LabelModel } from \"../models/LabelModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { AbstractFactory } from \"./AbstractFactory\";\n\nexport abstract class AbstractLabelFactory<T extends LabelModel = LabelModel> extends AbstractFactory<T> {\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, link: T): JSX.Element;\n}\n","import * as React from \"react\";\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\n\nexport interface DefaultLabelWidgetProps extends BaseWidgetProps {\n\tmodel: DefaultLabelModel;\n}\n\nexport class DefaultLabelWidget extends BaseWidget<DefaultLabelWidgetProps> {\n\tconstructor(props) {\n\t\tsuper(\"srd-default-label\", props);\n\t}\n\n\trender() {\n\t\treturn <div {...this.getProps()}>{this.props.model.label}</div>;\n\t}\n}\n","import { DefaultPortModel } from \"./DefaultPortModel\";\nimport * as _ from \"lodash\";\n\nimport { NodeModel, NodeModelListener } from \"../../models/NodeModel\";\nimport { Toolkit } from \"../../Toolkit\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultNodeModel extends NodeModel<NodeModelListener> {\n\tname: string;\n\tcolor: string;\n\tports: { [s: string]: DefaultPortModel };\n\n\tconstructor(name: string = \"Untitled\", color: string = \"rgb(0,192,255)\") {\n\t\tsuper(\"default\");\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t}\n\n\taddInPort(label: string): DefaultPortModel {\n\t\treturn this.addPort(new DefaultPortModel(true, Toolkit.UID(), label));\n\t}\n\n\taddOutPort(label: string): DefaultPortModel {\n\t\treturn this.addPort(new DefaultPortModel(false, Toolkit.UID(), label));\n\t}\n\n\tdeSerialize(object, engine: DiagramEngine) {\n\t\tsuper.deSerialize(object, engine);\n\t\tthis.name = object.name;\n\t\tthis.color = object.color;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tcolor: this.color\n\t\t});\n\t}\n\n\tgetInPorts(): DefaultPortModel[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn portModel.in;\n\t\t});\n\t}\n\n\tgetOutPorts(): DefaultPortModel[] {\n\t\treturn _.filter(this.ports, portModel => {\n\t\t\treturn !portModel.in;\n\t\t});\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { PointModel } from \"../../models/PointModel\";\nimport { Toolkit } from \"../../Toolkit\";\nimport { DefaultLinkFactory } from \"../factories/DefaultLinkFactory\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\nimport PathFinding from \"../../routing/PathFinding\";\nimport * as _ from \"lodash\";\nimport { LabelModel } from \"../../models/LabelModel\";\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\n\nexport interface DefaultLinkProps extends BaseWidgetProps {\n\tcolor?: string;\n\twidth?: number;\n\tsmooth?: boolean;\n\tlink: DefaultLinkModel;\n\tdiagramEngine: DiagramEngine;\n\tpointAdded?: (point: PointModel, event: MouseEvent) => any;\n}\n\nexport interface DefaultLinkState {\n\tselected: boolean;\n}\n\nexport class DefaultLinkWidget extends BaseWidget<DefaultLinkProps, DefaultLinkState> {\n\tpublic static defaultProps: DefaultLinkProps = {\n\t\tcolor: \"black\",\n\t\twidth: 3,\n\t\tlink: null,\n\t\tengine: null,\n\t\tsmooth: false,\n\t\tdiagramEngine: null\n\t};\n\n\t// DOM references to the label and paths (if label is given), used to calculate dynamic positioning\n\trefLabels: { [id: string]: HTMLElement };\n\trefPaths: SVGPathElement[];\n\n\tpathFinding: PathFinding; // only set when smart routing is active\n\n\tconstructor(props: DefaultLinkProps) {\n\t\tsuper(\"srd-default-link\", props);\n\n\t\tthis.refLabels = {};\n\t\tthis.refPaths = [];\n\t\tthis.state = {\n\t\t\tselected: false\n\t\t};\n\n\t\tif (props.diagramEngine.isSmartRoutingEnabled()) {\n\t\t\tthis.pathFinding = new PathFinding(this.props.diagramEngine);\n\t\t}\n\t}\n\n\tcalculateAllLabelPosition() {\n\t\t_.forEach(this.props.link.labels, (label, index) => {\n\t\t\tthis.calculateLabelPosition(label, index + 1);\n\t\t});\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif (this.props.link.labels.length > 0) {\n\t\t\twindow.requestAnimationFrame(this.calculateAllLabelPosition.bind(this));\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tif (this.props.link.labels.length > 0) {\n\t\t\twindow.requestAnimationFrame(this.calculateAllLabelPosition.bind(this));\n\t\t}\n\t}\n\n\taddPointToLink = (event: MouseEvent, index: number): void => {\n\t\tif (\n\t\t\t!event.shiftKey &&\n\t\t\t!this.props.diagramEngine.isModelLocked(this.props.link) &&\n\t\t\tthis.props.link.points.length - 1 <= this.props.diagramEngine.getMaxNumberPointsPerLink()\n\t\t) {\n\t\t\tconst point = new PointModel(this.props.link, this.props.diagramEngine.getRelativeMousePoint(event));\n\t\t\tpoint.setSelected(true);\n\t\t\tthis.forceUpdate();\n\t\t\tthis.props.link.addPoint(point, index);\n\t\t\tthis.props.pointAdded(point, event);\n\t\t}\n\t};\n\n\tgeneratePoint(pointIndex: number): JSX.Element {\n\t\tlet x = this.props.link.points[pointIndex].x;\n\t\tlet y = this.props.link.points[pointIndex].y;\n\n\t\treturn (\n\t\t\t<g key={\"point-\" + this.props.link.points[pointIndex].id}>\n\t\t\t\t<circle\n\t\t\t\t\tcx={x}\n\t\t\t\t\tcy={y}\n\t\t\t\t\tr={5}\n\t\t\t\t\tclassName={\n\t\t\t\t\t\t\"point \" +\n\t\t\t\t\t\tthis.bem(\"__point\") +\n\t\t\t\t\t\t(this.props.link.points[pointIndex].isSelected() ? this.bem(\"--point-selected\") : \"\")\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<circle\n\t\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\t\tthis.setState({ selected: false });\n\t\t\t\t\t}}\n\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\tthis.setState({ selected: true });\n\t\t\t\t\t}}\n\t\t\t\t\tdata-id={this.props.link.points[pointIndex].id}\n\t\t\t\t\tdata-linkid={this.props.link.id}\n\t\t\t\t\tcx={x}\n\t\t\t\t\tcy={y}\n\t\t\t\t\tr={15}\n\t\t\t\t\topacity={0}\n\t\t\t\t\tclassName={\"point \" + this.bem(\"__point\")}\n\t\t\t\t/>\n\t\t\t</g>\n\t\t);\n\t}\n\n\tgenerateLabel(label: LabelModel) {\n\t\tconst canvas = this.props.diagramEngine.canvas as HTMLElement;\n\t\treturn (\n\t\t\t<foreignObject\n\t\t\t\tkey={label.id}\n\t\t\t\tclassName={this.bem(\"__label\")}\n\t\t\t\twidth={canvas.offsetWidth}\n\t\t\t\theight={canvas.offsetHeight}\n\t\t\t>\n\t\t\t\t<div ref={ref => (this.refLabels[label.id] = ref)}>\n\t\t\t\t\t{this.props.diagramEngine\n\t\t\t\t\t\t.getFactoryForLabel(label)\n\t\t\t\t\t\t.generateReactWidget(this.props.diagramEngine, label)}\n\t\t\t\t</div>\n\t\t\t</foreignObject>\n\t\t);\n\t}\n\n\tgenerateLink(path: string, extraProps: any, id: string | number): JSX.Element {\n\t\tvar props = this.props;\n\n\t\tvar Bottom = React.cloneElement(\n\t\t\t(props.diagramEngine.getFactoryForLink(this.props.link) as DefaultLinkFactory).generateLinkSegment(\n\t\t\t\tthis.props.link,\n\t\t\t\tthis,\n\t\t\t\tthis.state.selected || this.props.link.isSelected(),\n\t\t\t\tpath\n\t\t\t),\n\t\t\t{\n\t\t\t\tref: ref => ref && this.refPaths.push(ref)\n\t\t\t}\n\t\t);\n\n\t\tvar Top = React.cloneElement(Bottom, {\n\t\t\t...extraProps,\n\t\t\tstrokeLinecap: \"round\",\n\t\t\tonMouseLeave: () => {\n\t\t\t\tthis.setState({ selected: false });\n\t\t\t},\n\t\t\tonMouseEnter: () => {\n\t\t\t\tthis.setState({ selected: true });\n\t\t\t},\n\t\t\tref: null,\n\t\t\t\"data-linkid\": this.props.link.getID(),\n\t\t\tstrokeOpacity: this.state.selected ? 0.1 : 0,\n\t\t\tstrokeWidth: 20,\n\t\t\tonContextMenu: () => {\n\t\t\t\tif (!this.props.diagramEngine.isModelLocked(this.props.link)) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tthis.props.link.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn (\n\t\t\t<g key={\"link-\" + id}>\n\t\t\t\t{Bottom}\n\t\t\t\t{Top}\n\t\t\t</g>\n\t\t);\n\t}\n\n\tfindPathAndRelativePositionToRenderLabel = (index: number): { path: any; position: number } => {\n\t\t// an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n\t\tconst lengths = this.refPaths.map(path => path.getTotalLength());\n\n\t\t// calculate the point where we want to display the label\n\t\tlet labelPosition =\n\t\t\tlengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\n\t\t\t(index / (this.props.link.labels.length + 1));\n\n\t\t// find the path where the label will be rendered and calculate the relative position\n\t\tlet pathIndex = 0;\n\t\twhile (pathIndex < this.refPaths.length) {\n\t\t\tif (labelPosition - lengths[pathIndex] < 0) {\n\t\t\t\treturn {\n\t\t\t\t\tpath: this.refPaths[pathIndex],\n\t\t\t\t\tposition: labelPosition\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// keep searching\n\t\t\tlabelPosition -= lengths[pathIndex];\n\t\t\tpathIndex++;\n\t\t}\n\t};\n\n\tcalculateLabelPosition = (label, index: number) => {\n\t\tif (!this.refLabels[label.id]) {\n\t\t\t// no label? nothing to do here\n\t\t\treturn;\n\t\t}\n\n\t\tconst { path, position } = this.findPathAndRelativePositionToRenderLabel(index);\n\n\t\tconst labelDimensions = {\n\t\t\twidth: this.refLabels[label.id].offsetWidth,\n\t\t\theight: this.refLabels[label.id].offsetHeight\n\t\t};\n\n\t\tconst pathCentre = path.getPointAtLength(position);\n\n\t\tconst labelCoordinates = {\n\t\t\tx: pathCentre.x - labelDimensions.width / 2 + label.offsetX,\n\t\t\ty: pathCentre.y - labelDimensions.height / 2 + label.offsetY\n\t\t};\n\t\tthis.refLabels[label.id].setAttribute(\n\t\t\t\"style\",\n\t\t\t`transform: translate(${labelCoordinates.x}px, ${labelCoordinates.y}px);`\n\t\t);\n\t};\n\n\t/**\n\t * Smart routing is only applicable when all conditions below are true:\n\t * - smart routing is set to true on the engine\n\t * - current link is between two nodes (not between a node and an empty point)\n\t * - no custom points exist along the line\n\t */\n\tisSmartRoutingApplicable(): boolean {\n\t\tconst { diagramEngine, link } = this.props;\n\n\t\tif (!diagramEngine.isSmartRoutingEnabled()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (link.points.length !== 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (link.sourcePort === null || link.targetPort === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\trender() {\n\t\tconst { diagramEngine } = this.props;\n\t\tif (!diagramEngine.nodesRendered) {\n\t\t\treturn null;\n\t\t}\n\n\t\t//ensure id is present for all points on the path\n\t\tvar points = this.props.link.points;\n\t\tvar paths = [];\n\n\t\tif (this.isSmartRoutingApplicable()) {\n\t\t\t// first step: calculate a direct path between the points being linked\n\t\t\tconst directPathCoords = this.pathFinding.calculateDirectPath(_.first(points), _.last(points));\n\n\t\t\tconst routingMatrix = diagramEngine.getRoutingMatrix();\n\t\t\t// now we need to extract, from the routing matrix, the very first walkable points\n\t\t\t// so they can be used as origin and destination of the link to be created\n\t\t\tconst smartLink = this.pathFinding.calculateLinkStartEndCoords(routingMatrix, directPathCoords);\n\n\t\t\tif (smartLink) {\n\t\t\t\tconst { start, end, pathToStart, pathToEnd } = smartLink;\n\n\t\t\t\t// second step: calculate a path avoiding hitting other elements\n\t\t\t\tconst simplifiedPath = this.pathFinding.calculateDynamicPath(\n\t\t\t\t\troutingMatrix,\n\t\t\t\t\tstart,\n\t\t\t\t\tend,\n\t\t\t\t\tpathToStart,\n\t\t\t\t\tpathToEnd\n\t\t\t\t);\n\n\t\t\t\tpaths.push(\n\t\t\t\t\t//smooth: boolean, extraProps: any, id: string | number, firstPoint: PointModel, lastPoint: PointModel\n\t\t\t\t\tthis.generateLink(\n\t\t\t\t\t\tToolkit.generateDynamicPath(simplifiedPath),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonMouseDown: event => {\n\t\t\t\t\t\t\t\tthis.addPointToLink(event, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"0\"\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// true when smart routing was skipped or not enabled.\n\t\t// See @link{#isSmartRoutingApplicable()}.\n\t\tif (paths.length === 0) {\n\t\t\tif (points.length === 2) {\n\t\t\t\tvar isHorizontal = Math.abs(points[0].x - points[1].x) > Math.abs(points[0].y - points[1].y);\n\t\t\t\tvar xOrY = isHorizontal ? \"x\" : \"y\";\n\n\t\t\t\t//draw the smoothing\n\t\t\t\t//if the points are too close, just draw a straight line\n\t\t\t\tvar margin = 50;\n\t\t\t\tif (Math.abs(points[0][xOrY] - points[1][xOrY]) < 50) {\n\t\t\t\t\tmargin = 5;\n\t\t\t\t}\n\n\t\t\t\tvar pointLeft = points[0];\n\t\t\t\tvar pointRight = points[1];\n\n\t\t\t\t//some defensive programming to make sure the smoothing is\n\t\t\t\t//always in the right direction\n\t\t\t\tif (pointLeft[xOrY] > pointRight[xOrY]) {\n\t\t\t\t\tpointLeft = points[1];\n\t\t\t\t\tpointRight = points[0];\n\t\t\t\t}\n\n\t\t\t\tpaths.push(\n\t\t\t\t\tthis.generateLink(\n\t\t\t\t\t\tToolkit.generateCurvePath(pointLeft, pointRight, this.props.link.curvyness),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonMouseDown: event => {\n\t\t\t\t\t\t\t\tthis.addPointToLink(event, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"0\"\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t// draw the link as dangeling\n\t\t\t\tif (this.props.link.targetPort === null) {\n\t\t\t\t\tpaths.push(this.generatePoint(1));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//draw the multiple anchors and complex line instead\n\t\t\t\tfor (let j = 0; j < points.length - 1; j++) {\n\t\t\t\t\tpaths.push(\n\t\t\t\t\t\tthis.generateLink(\n\t\t\t\t\t\t\tToolkit.generateLinePath(points[j], points[j + 1]),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"data-linkid\": this.props.link.id,\n\t\t\t\t\t\t\t\t\"data-point\": j,\n\t\t\t\t\t\t\t\tonMouseDown: (event: MouseEvent) => {\n\t\t\t\t\t\t\t\t\tthis.addPointToLink(event, j + 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tj\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t//render the circles\n\t\t\t\tfor (var i = 1; i < points.length - 1; i++) {\n\t\t\t\t\tpaths.push(this.generatePoint(i));\n\t\t\t\t}\n\n\t\t\t\tif (this.props.link.targetPort === null) {\n\t\t\t\t\tpaths.push(this.generatePoint(points.length - 1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.refPaths = [];\n\t\treturn (\n\t\t\t<g {...this.getProps()}>\n\t\t\t\t{paths}\n\t\t\t\t{_.map(this.props.link.labels, labelModel => {\n\t\t\t\t\treturn this.generateLabel(labelModel);\n\t\t\t\t})}\n\t\t\t</g>\n\t\t);\n\t}\n}\n","import { LinkModel } from \"../models/LinkModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { AbstractFactory } from \"./AbstractFactory\";\n\nexport abstract class AbstractLinkFactory<T extends LinkModel = LinkModel> extends AbstractFactory<T> {\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, link: T): JSX.Element;\n}\n","import * as React from \"react\";\nimport * as _ from \"lodash\";\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport { DefaultPortLabel } from \"./DefaultPortLabelWidget\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\n\nexport interface DefaultNodeProps extends BaseWidgetProps {\n\tnode: DefaultNodeModel;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface DefaultNodeState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultNodeWidget extends BaseWidget<DefaultNodeProps, DefaultNodeState> {\n\tconstructor(props: DefaultNodeProps) {\n\t\tsuper(\"srd-default-node\", props);\n\t\tthis.state = {};\n\t}\n\n\tgeneratePort(port) {\n\t\treturn <DefaultPortLabel model={port} key={port.id} />;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div {...this.getProps()} style={{ background: this.props.node.color }}>\n\t\t\t\t<div className={this.bem(\"__title\")}>\n\t\t\t\t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className={this.bem(\"__ports\")}>\n\t\t\t\t\t<div className={this.bem(\"__in\")}>\n\t\t\t\t\t\t{_.map(this.props.node.getInPorts(), this.generatePort.bind(this))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={this.bem(\"__out\")}>\n\t\t\t\t\t\t{_.map(this.props.node.getOutPorts(), this.generatePort.bind(this))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\nimport { PortWidget } from \"../../widgets/PortWidget\";\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\n\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\n\tmodel: DefaultPortModel;\n}\n\nexport interface DefaultPortLabelState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultPortLabel extends BaseWidget<DefaultPortLabelProps, DefaultPortLabelState> {\n\tconstructor(props) {\n\t\tsuper(\"srd-default-port\", props);\n\t}\n\n\tgetClassName() {\n\t\treturn super.getClassName() + (this.props.model.in ? this.bem(\"--in\") : this.bem(\"--out\"));\n\t}\n\n\trender() {\n\t\tvar port = <PortWidget node={this.props.model.getParent()} name={this.props.model.name} />;\n\t\tvar label = <div className=\"name\">{this.props.model.label}</div>;\n\n\t\treturn (\n\t\t\t<div {...this.getProps()}>\n\t\t\t\t{this.props.model.in ? port : label}\n\t\t\t\t{this.props.model.in ? label : port}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { NodeModel } from \"../models/NodeModel\";\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\n\nexport interface PortProps extends BaseWidgetProps {\n\tname: string;\n\tnode: NodeModel;\n}\n\nexport interface PortState {\n\tselected: boolean;\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class PortWidget extends BaseWidget<PortProps, PortState> {\n\tconstructor(props: PortProps) {\n\t\tsuper(\"srd-port\", props);\n\t\tthis.state = {\n\t\t\tselected: false\n\t\t};\n\t}\n\n\tgetClassName() {\n\t\treturn \"port \" + super.getClassName() + (this.state.selected ? this.bem(\"--selected\") : \"\");\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...this.getProps()}\n\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\tthis.setState({ selected: true });\n\t\t\t\t}}\n\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\tthis.setState({ selected: false });\n\t\t\t\t}}\n\t\t\t\tdata-name={this.props.name}\n\t\t\t\tdata-nodeid={this.props.node.getID()}\n\t\t\t/>\n\t\t);\n\t}\n}\n","import { NodeModel } from \"../models/NodeModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { AbstractFactory } from \"./AbstractFactory\";\n\nexport abstract class AbstractNodeFactory<T extends NodeModel = NodeModel> extends AbstractFactory<T> {\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, node: T): JSX.Element;\n}\n","import { BaseAction } from \"./BaseAction\";\nimport { DiagramModel } from \"../models/DiagramModel\";\n\nexport class MoveCanvasAction extends BaseAction {\n\tinitialOffsetX: number;\n\tinitialOffsetY: number;\n\n\tconstructor(mouseX: number, mouseY: number, diagramModel: DiagramModel) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.initialOffsetX = diagramModel.getOffsetX();\n\t\tthis.initialOffsetY = diagramModel.getOffsetY();\n\t}\n}\n","import { BaseAction } from \"./BaseAction\";\nimport { SelectionModel } from \"../models/SelectionModel\";\nimport { PointModel } from \"../models/PointModel\";\nimport { NodeModel } from \"../models/NodeModel\";\nimport { DiagramEngine } from \"../DiagramEngine\";\n\nexport class MoveItemsAction extends BaseAction {\n\tselectionModels: SelectionModel[];\n\tmoved: boolean;\n\n\tconstructor(mouseX: number, mouseY: number, diagramEngine: DiagramEngine) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.moved = false;\n\t\tdiagramEngine.enableRepaintEntities(diagramEngine.getDiagramModel().getSelectedItems());\n\t\tvar selectedItems = diagramEngine.getDiagramModel().getSelectedItems();\n\n\t\t//dont allow items which are locked to move\n\t\tselectedItems = selectedItems.filter(item => {\n\t\t\treturn !diagramEngine.isModelLocked(item);\n\t\t});\n\n\t\tthis.selectionModels = selectedItems.map((item: PointModel | NodeModel) => {\n\t\t\treturn {\n\t\t\t\tmodel: item,\n\t\t\t\tinitialX: item.x,\n\t\t\t\tinitialY: item.y\n\t\t\t};\n\t\t});\n\t}\n}\n","import { BaseAction } from \"./BaseAction\";\nimport { DiagramModel } from \"../models/DiagramModel\";\n\nexport class SelectingAction extends BaseAction {\n\tmouseX2: number;\n\tmouseY2: number;\n\n\tconstructor(mouseX: number, mouseY: number) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.mouseX2 = mouseX;\n\t\tthis.mouseY2 = mouseY;\n\t}\n\n\tgetBoxDimensions() {\n\t\treturn {\n\t\t\tleft: this.mouseX2 > this.mouseX ? this.mouseX : this.mouseX2,\n\t\t\ttop: this.mouseY2 > this.mouseY ? this.mouseY : this.mouseY2,\n\t\t\twidth: Math.abs(this.mouseX2 - this.mouseX),\n\t\t\theight: Math.abs(this.mouseY2 - this.mouseY),\n\t\t\tright: this.mouseX2 < this.mouseX ? this.mouseX : this.mouseX2,\n\t\t\tbottom: this.mouseY2 < this.mouseY ? this.mouseY : this.mouseY2\n\t\t};\n\t}\n\n\tcontainsElement(x: number, y: number, diagramModel: DiagramModel): boolean {\n\t\tvar z = diagramModel.getZoomLevel() / 100.0;\n\t\tlet dimensions = this.getBoxDimensions();\n\n\t\treturn (\n\t\t\tx * z + diagramModel.getOffsetX() > dimensions.left &&\n\t\t\tx * z + diagramModel.getOffsetX() < dimensions.right &&\n\t\t\ty * z + diagramModel.getOffsetY() > dimensions.top &&\n\t\t\ty * z + diagramModel.getOffsetY() < dimensions.bottom\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { LinkWidget } from \"../LinkWidget\";\nimport * as _ from \"lodash\";\nimport { PointModel } from \"../../models/PointModel\";\nimport { BaseWidget, BaseWidgetProps } from \"../BaseWidget\";\n\nexport interface LinkLayerProps extends BaseWidgetProps {\n\tdiagramEngine: DiagramEngine;\n\tpointAdded: (point: PointModel, event: MouseEvent) => any;\n}\n\nexport interface LinkLayerState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class LinkLayerWidget extends BaseWidget<LinkLayerProps, LinkLayerState> {\n\tconstructor(props: LinkLayerProps) {\n\t\tsuper(\"srd-link-layer\", props);\n\t\tthis.state = {};\n\t}\n\n\trender() {\n\t\tvar diagramModel = this.props.diagramEngine.getDiagramModel();\n\t\treturn (\n\t\t\t<svg\n\t\t\t\t{...this.getProps()}\n\t\t\t\tstyle={{\n\t\t\t\t\ttransform:\n\t\t\t\t\t\t\"translate(\" +\n\t\t\t\t\t\tdiagramModel.getOffsetX() +\n\t\t\t\t\t\t\"px,\" +\n\t\t\t\t\t\tdiagramModel.getOffsetY() +\n\t\t\t\t\t\t\"px) scale(\" +\n\t\t\t\t\t\tdiagramModel.getZoomLevel() / 100.0 +\n\t\t\t\t\t\t\")\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{//only perform these actions when we have a diagram\n\t\t\t\tthis.props.diagramEngine.canvas &&\n\t\t\t\t\t_.map(diagramModel.getLinks(), link => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tthis.props.diagramEngine.nodesRendered &&\n\t\t\t\t\t\t\t!this.props.diagramEngine.linksThatHaveInitiallyRendered[link.id]\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (link.sourcePort !== null) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst portCenter = this.props.diagramEngine.getPortCenter(link.sourcePort);\n\t\t\t\t\t\t\t\t\tlink.points[0].updateLocation(portCenter);\n\n\t\t\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(link.sourcePort);\n\t\t\t\t\t\t\t\t\tlink.sourcePort.updateCoords(portCoords);\n\n\t\t\t\t\t\t\t\t\tthis.props.diagramEngine.linksThatHaveInitiallyRendered[link.id] = true;\n\t\t\t\t\t\t\t\t} catch (ignore) {\n\t\t\t\t\t\t\t\t\t/*noop*/\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (link.targetPort !== null) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst portCenter = this.props.diagramEngine.getPortCenter(link.targetPort);\n\t\t\t\t\t\t\t\t\t_.last(link.points).updateLocation(portCenter);\n\n\t\t\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(link.targetPort);\n\t\t\t\t\t\t\t\t\tlink.targetPort.updateCoords(portCoords);\n\n\t\t\t\t\t\t\t\t\tthis.props.diagramEngine.linksThatHaveInitiallyRendered[link.id] = true;\n\t\t\t\t\t\t\t\t} catch (ignore) {\n\t\t\t\t\t\t\t\t\t/*noop*/\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//generate links\n\t\t\t\t\t\tvar generatedLink = this.props.diagramEngine.generateWidgetForLink(link);\n\t\t\t\t\t\tif (!generatedLink) {\n\t\t\t\t\t\t\tthrow new Error(`no link generated for type: ${link.getType()}`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<LinkWidget key={link.getID()} link={link} diagramEngine={this.props.diagramEngine}>\n\t\t\t\t\t\t\t\t{React.cloneElement(generatedLink, {\n\t\t\t\t\t\t\t\t\tpointAdded: this.props.pointAdded\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</LinkWidget>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t</svg>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { LinkModel } from \"../models/LinkModel\";\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\n\nexport interface LinkProps extends BaseWidgetProps {\n\tlink: LinkModel;\n\tdiagramEngine: DiagramEngine;\n\tchildren?: any;\n}\n\nexport interface LinkState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class LinkWidget extends BaseWidget<LinkProps, LinkState> {\n\tconstructor(props: LinkProps) {\n\t\tsuper(\"srd-link\", props);\n\t\tthis.state = {};\n\t}\n\n\tshouldComponentUpdate() {\n\t\treturn this.props.diagramEngine.canEntityRepaint(this.props.link);\n\t}\n\n\trender() {\n\t\treturn this.props.children;\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport * as _ from \"lodash\";\nimport { NodeWidget } from \"../NodeWidget\";\nimport { NodeModel } from \"../../models/NodeModel\";\nimport { BaseWidget, BaseWidgetProps } from \"../BaseWidget\";\n\nexport interface NodeLayerProps extends BaseWidgetProps {\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface NodeLayerState {}\n\nexport class NodeLayerWidget extends BaseWidget<NodeLayerProps, NodeLayerState> {\n\tconstructor(props: NodeLayerProps) {\n\t\tsuper(\"srd-node-layer\", props);\n\t\tthis.state = {};\n\t}\n\n\tupdateNodeDimensions = () => {\n\t\tif (!this.props.diagramEngine.nodesRendered) {\n\t\t\tconst diagramModel = this.props.diagramEngine.getDiagramModel();\n\t\t\t_.map(diagramModel.getNodes(), node => {\n\t\t\t\tnode.updateDimensions(this.props.diagramEngine.getNodeDimensions(node));\n\t\t\t});\n\t\t}\n\t};\n\n\tcomponentDidUpdate() {\n\t\tthis.updateNodeDimensions();\n\t\tthis.props.diagramEngine.nodesRendered = true;\n\t}\n\n\trender() {\n\t\tvar diagramModel = this.props.diagramEngine.getDiagramModel();\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...this.getProps()}\n\t\t\t\tstyle={{\n\t\t\t\t\ttransform:\n\t\t\t\t\t\t\"translate(\" +\n\t\t\t\t\t\tdiagramModel.getOffsetX() +\n\t\t\t\t\t\t\"px,\" +\n\t\t\t\t\t\tdiagramModel.getOffsetY() +\n\t\t\t\t\t\t\"px) scale(\" +\n\t\t\t\t\t\tdiagramModel.getZoomLevel() / 100.0 +\n\t\t\t\t\t\t\")\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{_.map(diagramModel.getNodes(), (node: NodeModel) => {\n\t\t\t\t\treturn React.createElement(\n\t\t\t\t\t\tNodeWidget,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdiagramEngine: this.props.diagramEngine,\n\t\t\t\t\t\t\tkey: node.id,\n\t\t\t\t\t\t\tnode: node\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis.props.diagramEngine.generateWidgetForNode(node)\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport { NodeModel } from \"../models/NodeModel\";\nimport { Toolkit } from \"../Toolkit\";\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\n\nexport interface NodeProps extends BaseWidgetProps {\n\tnode: NodeModel;\n\tchildren?: any;\n\tdiagramEngine: DiagramEngine;\n}\n\nexport interface NodeState {}\n\n/**\n * @author Dylan Vorster\n */\nexport class NodeWidget extends BaseWidget<NodeProps, NodeState> {\n\tconstructor(props: NodeProps) {\n\t\tsuper(\"srd-node\", props);\n\t\tthis.state = {};\n\t}\n\n\tshouldComponentUpdate() {\n\t\treturn this.props.diagramEngine.canEntityRepaint(this.props.node);\n\t}\n\n\tgetClassName() {\n\t\treturn \"node \" + super.getClassName() + (this.props.node.isSelected() ? this.bem(\"--selected\") : \"\");\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...this.getProps()}\n\t\t\t\tdata-nodeid={this.props.node.id}\n\t\t\t\tstyle={{\n\t\t\t\t\ttop: this.props.node.y,\n\t\t\t\t\tleft: this.props.node.x\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","var matches = require('matches-selector')\r\n\r\nmodule.exports = function (element, selector, checkYoSelf) {\r\n  var parent = checkYoSelf ? element : element.parentNode\r\n\r\n  while (parent && parent !== document) {\r\n    if (matches(parent, selector)) return parent;\r\n    parent = parent.parentNode\r\n  }\r\n}\r\n","\r\n/**\r\n * Element prototype.\r\n */\r\n\r\nvar proto = Element.prototype;\r\n\r\n/**\r\n * Vendor function.\r\n */\r\n\r\nvar vendor = proto.matchesSelector\r\n  || proto.webkitMatchesSelector\r\n  || proto.mozMatchesSelector\r\n  || proto.msMatchesSelector\r\n  || proto.oMatchesSelector;\r\n\r\n/**\r\n * Expose `match()`.\r\n */\r\n\r\nmodule.exports = match;\r\n\r\n/**\r\n * Match `el` to `selector`.\r\n *\r\n * @param {Element} el\r\n * @param {String} selector\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nfunction match(el, selector) {\r\n  if (vendor) return vendor.call(el, selector);\r\n  var nodes = el.parentNode.querySelectorAll(selector);\r\n  for (var i = 0; i < nodes.length; ++i) {\r\n    if (nodes[i] == el) return true;\r\n  }\r\n  return false;\r\n}","module.exports = require('./src/PathFinding');\r\n","module.exports = {\r\n    'Heap'                      : require('heap'),\r\n    'Node'                      : require('./core/Node'),\r\n    'Grid'                      : require('./core/Grid'),\r\n    'Util'                      : require('./core/Util'),\r\n    'DiagonalMovement'          : require('./core/DiagonalMovement'),\r\n    'Heuristic'                 : require('./core/Heuristic'),\r\n    'AStarFinder'               : require('./finders/AStarFinder'),\r\n    'BestFirstFinder'           : require('./finders/BestFirstFinder'),\r\n    'BreadthFirstFinder'        : require('./finders/BreadthFirstFinder'),\r\n    'DijkstraFinder'            : require('./finders/DijkstraFinder'),\r\n    'BiAStarFinder'             : require('./finders/BiAStarFinder'),\r\n    'BiBestFirstFinder'         : require('./finders/BiBestFirstFinder'),\r\n    'BiBreadthFirstFinder'      : require('./finders/BiBreadthFirstFinder'),\r\n    'BiDijkstraFinder'          : require('./finders/BiDijkstraFinder'),\r\n    'IDAStarFinder'             : require('./finders/IDAStarFinder'),\r\n    'JumpPointFinder'           : require('./finders/JumpPointFinder'),\r\n};\r\n","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  if (typeof module !== \"undefined\" && module !== null ? module.exports : void 0) {\n    module.exports = Heap;\n  } else {\n    window.Heap = Heap;\n  }\n\n}).call(this);\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var Node = require('./Node');\r\nvar DiagonalMovement = require('./DiagonalMovement');\r\n\r\n/**\r\n * The Grid class, which serves as the encapsulation of the layout of the nodes.\r\n * @constructor\r\n * @param {number|Array<Array<(number|boolean)>>} width_or_matrix Number of columns of the grid, or matrix\r\n * @param {number} height Number of rows of the grid.\r\n * @param {Array<Array<(number|boolean)>>} [matrix] - A 0-1 matrix\r\n *     representing the walkable status of the nodes(0 or false for walkable).\r\n *     If the matrix is not supplied, all the nodes will be walkable.  */\r\nfunction Grid(width_or_matrix, height, matrix) {\r\n    var width;\r\n\r\n    if (typeof width_or_matrix !== 'object') {\r\n        width = width_or_matrix;\r\n    } else {\r\n        height = width_or_matrix.length;\r\n        width = width_or_matrix[0].length;\r\n        matrix = width_or_matrix;\r\n    }\r\n\r\n    /**\r\n     * The number of columns of the grid.\r\n     * @type number\r\n     */\r\n    this.width = width;\r\n    /**\r\n     * The number of rows of the grid.\r\n     * @type number\r\n     */\r\n    this.height = height;\r\n\r\n    /**\r\n     * A 2D array of nodes.\r\n     */\r\n    this.nodes = this._buildNodes(width, height, matrix);\r\n}\r\n\r\n/**\r\n * Build and return the nodes.\r\n * @private\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {Array<Array<number|boolean>>} [matrix] - A 0-1 matrix representing\r\n *     the walkable status of the nodes.\r\n * @see Grid\r\n */\r\nGrid.prototype._buildNodes = function(width, height, matrix) {\r\n    var i, j,\r\n        nodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        nodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            nodes[i][j] = new Node(j, i);\r\n        }\r\n    }\r\n\r\n\r\n    if (matrix === undefined) {\r\n        return nodes;\r\n    }\r\n\r\n    if (matrix.length !== height || matrix[0].length !== width) {\r\n        throw new Error('Matrix size does not fit');\r\n    }\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        for (j = 0; j < width; ++j) {\r\n            if (matrix[i][j]) {\r\n                // 0, false, null will be walkable\r\n                // while others will be un-walkable\r\n                nodes[i][j].walkable = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return nodes;\r\n};\r\n\r\n\r\nGrid.prototype.getNodeAt = function(x, y) {\r\n    return this.nodes[y][x];\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the node at the given position is walkable.\r\n * (Also returns false if the position is outside the grid.)\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @return {boolean} - The walkability of the node.\r\n */\r\nGrid.prototype.isWalkableAt = function(x, y) {\r\n    return this.isInside(x, y) && this.nodes[y][x].walkable;\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the position is inside the grid.\r\n * XXX: `grid.isInside(x, y)` is wierd to read.\r\n * It should be `(x, y) is inside grid`, but I failed to find a better\r\n * name for this method.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nGrid.prototype.isInside = function(x, y) {\r\n    return (x >= 0 && x < this.width) && (y >= 0 && y < this.height);\r\n};\r\n\r\n\r\n/**\r\n * Set whether the node on the given position is walkable.\r\n * NOTE: throws exception if the coordinate is not inside the grid.\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @param {boolean} walkable - Whether the position is walkable.\r\n */\r\nGrid.prototype.setWalkableAt = function(x, y, walkable) {\r\n    this.nodes[y][x].walkable = walkable;\r\n};\r\n\r\n\r\n/**\r\n * Get the neighbors of the given node.\r\n *\r\n *     offsets      diagonalOffsets:\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 0 |   |    | 0 |   | 1 |\r\n *  +---+---+---+    +---+---+---+\r\n *  | 3 |   | 1 |    |   |   |   |\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 2 |   |    | 3 |   | 2 |\r\n *  +---+---+---+    +---+---+---+\r\n *\r\n *  When allowDiagonal is true, if offsets[i] is valid, then\r\n *  diagonalOffsets[i] and\r\n *  diagonalOffsets[(i + 1) % 4] is valid.\r\n * @param {Node} node\r\n * @param {DiagonalMovement} diagonalMovement\r\n */\r\nGrid.prototype.getNeighbors = function(node, diagonalMovement) {\r\n    var x = node.x,\r\n        y = node.y,\r\n        neighbors = [],\r\n        s0 = false, d0 = false,\r\n        s1 = false, d1 = false,\r\n        s2 = false, d2 = false,\r\n        s3 = false, d3 = false,\r\n        nodes = this.nodes;\r\n\r\n    // ↑\r\n    if (this.isWalkableAt(x, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x]);\r\n        s0 = true;\r\n    }\r\n    // →\r\n    if (this.isWalkableAt(x + 1, y)) {\r\n        neighbors.push(nodes[y][x + 1]);\r\n        s1 = true;\r\n    }\r\n    // ↓\r\n    if (this.isWalkableAt(x, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x]);\r\n        s2 = true;\r\n    }\r\n    // ←\r\n    if (this.isWalkableAt(x - 1, y)) {\r\n        neighbors.push(nodes[y][x - 1]);\r\n        s3 = true;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.Never) {\r\n        return neighbors;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        d0 = s3 && s0;\r\n        d1 = s0 && s1;\r\n        d2 = s1 && s2;\r\n        d3 = s2 && s3;\r\n    } else if (diagonalMovement === DiagonalMovement.IfAtMostOneObstacle) {\r\n        d0 = s3 || s0;\r\n        d1 = s0 || s1;\r\n        d2 = s1 || s2;\r\n        d3 = s2 || s3;\r\n    } else if (diagonalMovement === DiagonalMovement.Always) {\r\n        d0 = true;\r\n        d1 = true;\r\n        d2 = true;\r\n        d3 = true;\r\n    } else {\r\n        throw new Error('Incorrect value of diagonalMovement');\r\n    }\r\n\r\n    // ↖\r\n    if (d0 && this.isWalkableAt(x - 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x - 1]);\r\n    }\r\n    // ↗\r\n    if (d1 && this.isWalkableAt(x + 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x + 1]);\r\n    }\r\n    // ↘\r\n    if (d2 && this.isWalkableAt(x + 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x + 1]);\r\n    }\r\n    // ↙\r\n    if (d3 && this.isWalkableAt(x - 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x - 1]);\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\n\r\n/**\r\n * Get a clone of this grid.\r\n * @return {Grid} Cloned grid.\r\n */\r\nGrid.prototype.clone = function() {\r\n    var i, j,\r\n\r\n        width = this.width,\r\n        height = this.height,\r\n        thisNodes = this.nodes,\r\n\r\n        newGrid = new Grid(width, height),\r\n        newNodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        newNodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            newNodes[i][j] = new Node(j, i, thisNodes[i][j].walkable);\r\n        }\r\n    }\r\n\r\n    newGrid.nodes = newNodes;\r\n\r\n    return newGrid;\r\n};\r\n\r\nmodule.exports = Grid;\r\n","var AStarFinder = require('./AStarFinder');\r\n\r\n/**\r\n * Best-First-Search path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction BestFirstFinder(opt) {\r\n    AStarFinder.call(this, opt);\r\n\r\n    var orig = this.heuristic;\r\n    this.heuristic = function(dx, dy) {\r\n        return orig(dx, dy) * 1000000;\r\n    };\r\n}\r\n\r\nBestFirstFinder.prototype = new AStarFinder();\r\nBestFirstFinder.prototype.constructor = BestFirstFinder;\r\n\r\nmodule.exports = BestFirstFinder;\r\n","var Util = require('../core/Util');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = [],\r\n        diagonalMovement = this.diagonalMovement,\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        neighbors, neighbor, node, i, l;\r\n\r\n    // push the start pos into the queue\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the queue is not empty\r\n    while (openList.length) {\r\n        // take the front node from the queue\r\n        node = openList.shift();\r\n        node.closed = true;\r\n\r\n        // reached the end position\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            // skip this neighbor if it has been inspected before\r\n            if (neighbor.closed || neighbor.opened) {\r\n                continue;\r\n            }\r\n\r\n            openList.push(neighbor);\r\n            neighbor.opened = true;\r\n            neighbor.parent = node;\r\n        }\r\n    }\r\n    \r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BreadthFirstFinder;\r\n","var AStarFinder = require('./AStarFinder');\r\n\r\n/**\r\n * Dijkstra path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction DijkstraFinder(opt) {\r\n    AStarFinder.call(this, opt);\r\n    this.heuristic = function(dx, dy) {\r\n        return 0;\r\n    };\r\n}\r\n\r\nDijkstraFinder.prototype = new AStarFinder();\r\nDijkstraFinder.prototype.constructor = DijkstraFinder;\r\n\r\nmodule.exports = DijkstraFinder;\r\n","var BiAStarFinder = require('./BiAStarFinder');\r\n\r\n/**\r\n * Bi-direcitional Best-First-Search path-finder.\r\n * @constructor\r\n * @extends BiAStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction BiBestFirstFinder(opt) {\r\n    BiAStarFinder.call(this, opt);\r\n\r\n    var orig = this.heuristic;\r\n    this.heuristic = function(dx, dy) {\r\n        return orig(dx, dy) * 1000000;\r\n    };\r\n}\r\n\r\nBiBestFirstFinder.prototype = new BiAStarFinder();\r\nBiBestFirstFinder.prototype.constructor = BiBestFirstFinder;\r\n\r\nmodule.exports = BiBestFirstFinder;\r\n","var Util = require('../core/Util');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Bi-directional Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BiBreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        startOpenList = [], endOpenList = [],\r\n        neighbors, neighbor, node,\r\n        diagonalMovement = this.diagonalMovement,\r\n        BY_START = 0, BY_END = 1,\r\n        i, l;\r\n\r\n    // push the start and end nodes into the queues\r\n    startOpenList.push(startNode);\r\n    startNode.opened = true;\r\n    startNode.by = BY_START;\r\n\r\n    endOpenList.push(endNode);\r\n    endNode.opened = true;\r\n    endNode.by = BY_END;\r\n\r\n    // while both the queues are not empty\r\n    while (startOpenList.length && endOpenList.length) {\r\n\r\n        // expand start open list\r\n\r\n        node = startOpenList.shift();\r\n        node.closed = true;\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened) {\r\n                // if this node has been inspected by the reversed search,\r\n                // then a path is found.\r\n                if (neighbor.by === BY_END) {\r\n                    return Util.biBacktrace(node, neighbor);\r\n                }\r\n                continue;\r\n            }\r\n            startOpenList.push(neighbor);\r\n            neighbor.parent = node;\r\n            neighbor.opened = true;\r\n            neighbor.by = BY_START;\r\n        }\r\n\r\n        // expand end open list\r\n\r\n        node = endOpenList.shift();\r\n        node.closed = true;\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened) {\r\n                if (neighbor.by === BY_START) {\r\n                    return Util.biBacktrace(neighbor, node);\r\n                }\r\n                continue;\r\n            }\r\n            endOpenList.push(neighbor);\r\n            neighbor.parent = node;\r\n            neighbor.opened = true;\r\n            neighbor.by = BY_END;\r\n        }\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiBreadthFirstFinder;\r\n","var BiAStarFinder = require('./BiAStarFinder');\r\n\r\n/**\r\n * Bi-directional Dijkstra path-finder.\r\n * @constructor\r\n * @extends BiAStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BiDijkstraFinder(opt) {\r\n    BiAStarFinder.call(this, opt);\r\n    this.heuristic = function(dx, dy) {\r\n        return 0;\r\n    };\r\n}\r\n\r\nBiDijkstraFinder.prototype = new BiAStarFinder();\r\nBiDijkstraFinder.prototype.constructor = BiDijkstraFinder;\r\n\r\nmodule.exports = BiDijkstraFinder;\r\n","var Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar Node       = require('../core/Node');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Iterative Deeping A Star (IDA*) path-finder.\r\n *\r\n * Recursion based on:\r\n *   http://www.apl.jhu.edu/~hall/AI-Programming/IDA-Star.html\r\n *\r\n * Path retracing based on:\r\n *  V. Nageshwara Rao, Vipin Kumar and K. Ramesh\r\n *  \"A Parallel Implementation of Iterative-Deeping-A*\", January 1987.\r\n *  ftp://ftp.cs.utexas.edu/.snapshot/hourly.1/pub/AI-Lab/tech-reports/UT-AI-TR-87-46.pdf\r\n *\r\n * @author Gerard Meier (www.gerardmeier.com)\r\n *\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n * @param {boolean} opt.trackRecursion Whether to track recursion for\r\n *     statistical purposes.\r\n * @param {number} opt.timeLimit Maximum execution time. Use <= 0 for infinite.\r\n */\r\nfunction IDAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.trackRecursion = opt.trackRecursion || false;\r\n    this.timeLimit = opt.timeLimit || Infinity; // Default: no time limit.\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    // admissible, it should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path. When an empty array is returned, either\r\n * no path is possible, or the maximum execution time is reached.\r\n *\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nIDAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    // Used for statistics:\r\n    var nodesVisited = 0;\r\n\r\n    // Execution time limitation:\r\n    var startTime = new Date().getTime();\r\n\r\n    // Heuristic helper:\r\n    var h = function(a, b) {\r\n        return this.heuristic(Math.abs(b.x - a.x), Math.abs(b.y - a.y));\r\n    }.bind(this);\r\n\r\n    // Step cost from a to b:\r\n    var cost = function(a, b) {\r\n        return (a.x === b.x || a.y === b.y) ? 1 : Math.SQRT2;\r\n    };\r\n\r\n    /**\r\n     * IDA* search implementation.\r\n     *\r\n     * @param {Node} The node currently expanding from.\r\n     * @param {number} Cost to reach the given node.\r\n     * @param {number} Maximum search depth (cut-off value).\r\n     * @param {Array<Array<number>>} The found route.\r\n     * @param {number} Recursion depth.\r\n     *\r\n     * @return {Object} either a number with the new optimal cut-off depth,\r\n     * or a valid node instance, in which case a path was found.\r\n     */\r\n    var search = function(node, g, cutoff, route, depth) {\r\n        nodesVisited++;\r\n\r\n        // Enforce timelimit:\r\n        if (this.timeLimit > 0 &&\r\n            new Date().getTime() - startTime > this.timeLimit * 1000) {\r\n            // Enforced as \"path-not-found\".\r\n            return Infinity;\r\n        }\r\n\r\n        var f = g + h(node, end) * this.weight;\r\n\r\n        // We've searched too deep for this iteration.\r\n        if (f > cutoff) {\r\n            return f;\r\n        }\r\n\r\n        if (node == end) {\r\n            route[depth] = [node.x, node.y];\r\n            return node;\r\n        }\r\n\r\n        var min, t, k, neighbour;\r\n\r\n        var neighbours = grid.getNeighbors(node, this.diagonalMovement);\r\n\r\n        // Sort the neighbours, gives nicer paths. But, this deviates\r\n        // from the original algorithm - so I left it out.\r\n        //neighbours.sort(function(a, b){\r\n        //    return h(a, end) - h(b, end);\r\n        //});\r\n\r\n        \r\n        /*jshint -W084 *///Disable warning: Expected a conditional expression and instead saw an assignment\r\n        for (k = 0, min = Infinity; neighbour = neighbours[k]; ++k) {\r\n        /*jshint +W084 *///Enable warning: Expected a conditional expression and instead saw an assignment\r\n            if (this.trackRecursion) {\r\n                // Retain a copy for visualisation. Due to recursion, this\r\n                // node may be part of other paths too.\r\n                neighbour.retainCount = neighbour.retainCount + 1 || 1;\r\n\r\n                if(neighbour.tested !== true) {\r\n                    neighbour.tested = true;\r\n                }\r\n            }\r\n\r\n            t = search(neighbour, g + cost(node, neighbour), cutoff, route, depth + 1);\r\n\r\n            if (t instanceof Node) {\r\n                route[depth] = [node.x, node.y];\r\n\r\n                // For a typical A* linked list, this would work:\r\n                // neighbour.parent = node;\r\n                return t;\r\n            }\r\n\r\n            // Decrement count, then determine whether it's actually closed.\r\n            if (this.trackRecursion && (--neighbour.retainCount) === 0) {\r\n                neighbour.tested = false;\r\n            }\r\n\r\n            if (t < min) {\r\n                min = t;\r\n            }\r\n        }\r\n\r\n        return min;\r\n\r\n    }.bind(this);\r\n\r\n    // Node instance lookups:\r\n    var start = grid.getNodeAt(startX, startY);\r\n    var end   = grid.getNodeAt(endX, endY);\r\n\r\n    // Initial search depth, given the typical heuristic contraints,\r\n    // there should be no cheaper route possible.\r\n    var cutOff = h(start, end);\r\n\r\n    var j, route, t;\r\n\r\n    // With an overflow protection.\r\n    for (j = 0; true; ++j) {\r\n\r\n        route = [];\r\n\r\n        // Search till cut-off depth:\r\n        t = search(start, 0, cutOff, route, 0);\r\n\r\n        // Route not possible, or not found in time limit.\r\n        if (t === Infinity) {\r\n            return [];\r\n        }\r\n\r\n        // If t is a node, it's also the end node. Route is now\r\n        // populated with a valid path to the end node.\r\n        if (t instanceof Node) {\r\n            return route;\r\n        }\r\n\r\n        // Try again, this time with a deeper cut-off. The t score\r\n        // is the closest we got to the end node.\r\n        cutOff = t;\r\n    }\r\n\r\n    // This _should_ never to be reached.\r\n    return [];\r\n};\r\n\r\nmodule.exports = IDAStarFinder;\r\n","/**\r\n * @author aniero / https://github.com/aniero\r\n */\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\nvar JPFNeverMoveDiagonally = require('./JPFNeverMoveDiagonally');\r\nvar JPFAlwaysMoveDiagonally = require('./JPFAlwaysMoveDiagonally');\r\nvar JPFMoveDiagonallyIfNoObstacles = require('./JPFMoveDiagonallyIfNoObstacles');\r\nvar JPFMoveDiagonallyIfAtMostOneObstacle = require('./JPFMoveDiagonallyIfAtMostOneObstacle');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm\r\n * @param {Object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {DiagonalMovement} opt.diagonalMovement Condition under which diagonal\r\n *      movement will be allowed.\r\n */\r\nfunction JumpPointFinder(opt) {\r\n    opt = opt || {};\r\n    if (opt.diagonalMovement === DiagonalMovement.Never) {\r\n        return new JPFNeverMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.Always) {\r\n        return new JPFAlwaysMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        return new JPFMoveDiagonallyIfNoObstacles(opt);\r\n    } else {\r\n        return new JPFMoveDiagonallyIfAtMostOneObstacle(opt);\r\n    }\r\n}\r\n\r\nmodule.exports = JumpPointFinder;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm allowing only horizontal\r\n * or vertical movements.\r\n */\r\nfunction JPFNeverMoveDiagonally(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFNeverMoveDiagonally.prototype = new JumpPointFinderBase();\r\nJPFNeverMoveDiagonally.prototype.constructor = JPFNeverMoveDiagonally;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFNeverMoveDiagonally.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    if (dx !== 0) {\r\n        if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||\r\n            (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    else if (dy !== 0) {\r\n        if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||\r\n            (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        //When moving vertically, must check for horizontal jump points\r\n        if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"Only horizontal and vertical movements are allowed\");\r\n    }\r\n\r\n    return this._jump(x + dx, y + dy, x, y);\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFNeverMoveDiagonally.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        if (dx !== 0) {\r\n            if (grid.isWalkableAt(x, y - 1)) {\r\n                neighbors.push([x, y - 1]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + 1)) {\r\n                neighbors.push([x, y + 1]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n        }\r\n        else if (dy !== 0) {\r\n            if (grid.isWalkableAt(x - 1, y)) {\r\n                neighbors.push([x - 1, y]);\r\n            }\r\n            if (grid.isWalkableAt(x + 1, y)) {\r\n                neighbors.push([x + 1, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Never);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFNeverMoveDiagonally;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which always moves\r\n * diagonally irrespective of the number of obstacles.\r\n */\r\nfunction JPFAlwaysMoveDiagonally(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFAlwaysMoveDiagonally.prototype = new JumpPointFinderBase();\r\nJPFAlwaysMoveDiagonally.prototype.constructor = JPFAlwaysMoveDiagonally;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFAlwaysMoveDiagonally.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    return this._jump(x + dx, y + dy, x, y);\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFAlwaysMoveDiagonally.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y + dy)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                }\r\n                if (!grid.isWalkableAt(x + 1, y)) {\r\n                    neighbors.push([x + 1, y + dy]);\r\n                }\r\n                if (!grid.isWalkableAt(x - 1, y)) {\r\n                    neighbors.push([x - 1, y + dy]);\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                }\r\n                if (!grid.isWalkableAt(x, y + 1)) {\r\n                    neighbors.push([x + dx, y + 1]);\r\n                }\r\n                if (!grid.isWalkableAt(x, y - 1)) {\r\n                    neighbors.push([x + dx, y - 1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Always);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFAlwaysMoveDiagonally;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there are no obstacles.\r\n */\r\nfunction JPFMoveDiagonallyIfNoObstacles(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfNoObstacles.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfNoObstacles.prototype.constructor = JPFMoveDiagonallyIfNoObstacles;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfNoObstacles.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        // if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            // (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            // return [x, y];\r\n        // }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if (dx !== 0) {\r\n            if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||\r\n                (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else if (dy !== 0) {\r\n            if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||\r\n                (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {\r\n                return [x, y];\r\n            }\r\n            // When moving vertically, must check for horizontal jump points\r\n            // if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {\r\n                // return [x, y];\r\n            // }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfNoObstacles.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            var isNextWalkable;\r\n            if (dx !== 0) {\r\n                isNextWalkable = grid.isWalkableAt(x + dx, y);\r\n                var isTopWalkable = grid.isWalkableAt(x, y + 1);\r\n                var isBottomWalkable = grid.isWalkableAt(x, y - 1);\r\n\r\n                if (isNextWalkable) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (isTopWalkable) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (isBottomWalkable) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n                if (isTopWalkable) {\r\n                    neighbors.push([x, y + 1]);\r\n                }\r\n                if (isBottomWalkable) {\r\n                    neighbors.push([x, y - 1]);\r\n                }\r\n            }\r\n            else if (dy !== 0) {\r\n                isNextWalkable = grid.isWalkableAt(x, y + dy);\r\n                var isRightWalkable = grid.isWalkableAt(x + 1, y);\r\n                var isLeftWalkable = grid.isWalkableAt(x - 1, y);\r\n\r\n                if (isNextWalkable) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (isRightWalkable) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (isLeftWalkable) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n                if (isRightWalkable) {\r\n                    neighbors.push([x + 1, y]);\r\n                }\r\n                if (isLeftWalkable) {\r\n                    neighbors.push([x - 1, y]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.OnlyWhenNoObstacles);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfNoObstacles;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there is at most one obstacle.\r\n */\r\nfunction JPFMoveDiagonallyIfAtMostOneObstacle(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype.constructor = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) || grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) || grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (!grid.isWalkableAt(x + 1, y)) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x - 1, y)) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (!grid.isWalkableAt(x, y + 1)) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x, y - 1)) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.IfAtMostOneObstacle);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nvar _geom = require('./geom');\n\nvar Path = function Path(init) {\n  var _instructions = init || [];\n\n  var push = function push(arr, el) {\n    var copy = arr.slice(0, arr.length);\n    copy.push(el);\n    return copy;\n  };\n\n  var areEqualPoints = function areEqualPoints(_ref, _ref3) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var a1 = _ref2[0];\n    var b1 = _ref2[1];\n\n    var _ref32 = _slicedToArray(_ref3, 2);\n\n    var a2 = _ref32[0];\n    var b2 = _ref32[1];\n    return a1 === a2 && b1 === b2;\n  };\n\n  var trimZeros = function trimZeros(string, char) {\n    var l = string.length;\n    while (string.charAt(l - 1) === '0') {\n      l = l - 1;\n    }\n    if (string.charAt(l - 1) === '.') {\n      l = l - 1;\n    }\n    return string.substr(0, l);\n  };\n\n  var round = function round(number, digits) {\n    var str = number.toFixed(digits);\n    return trimZeros(str);\n  };\n\n  var printInstrunction = function printInstrunction(_ref4) {\n    var command = _ref4.command;\n    var params = _ref4.params;\n\n    var numbers = params.map(function (param) {\n      return round(param, 6);\n    });\n    return command + ' ' + numbers.join(' ');\n  };\n\n  var point = function point(_ref5, prev) {\n    var command = _ref5.command;\n    var params = _ref5.params;\n\n    switch (command) {\n      case 'M':\n        return [params[0], params[1]];\n      case 'L':\n        return [params[0], params[1]];\n      case 'H':\n        return [params[0], prev[1]];\n      case 'V':\n        return [prev[0], params[0]];\n      case 'Z':\n        return null;\n      case 'C':\n        return [params[4], params[5]];\n      case 'S':\n        return [params[2], params[3]];\n      case 'Q':\n        return [params[2], params[3]];\n      case 'T':\n        return [params[0], params[1]];\n      case 'A':\n        return [params[5], params[6]];\n    }\n  };\n\n  var transformParams = function transformParams(instruction, matrix, prev) {\n    var p = instruction.params;\n\n    var transformer = {\n      'V': function V(instruction, matrix, prev) {\n        var pts = [{ x: prev[0], y: p[1] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n        if (newPts[0].x === (0, _geom.matrixTransform)([{ x: prev[0], y: prev[1] }])[0].x) {\n          return {\n            command: 'V',\n            params: [newPts[0].y]\n          };\n        } else {\n          return {\n            command: 'L',\n            params: [newPts[0].x, newPts[0].y]\n          };\n        }\n      },\n      'H': function H(instruction, matrix, prev) {\n        var pts = [{ x: p[0], y: prev[1] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n        if (newPts[0].y === (0, _geom.matrixTransform)([{ x: prev[0], y: prev[1] }])[0].y) {\n          return {\n            command: 'H',\n            params: [newPts[0].x]\n          };\n        } else {\n          return {\n            command: 'L',\n            params: [newPts[0].x, newPts[0].y]\n          };\n        }\n      },\n      'A': function A(instruction, matrix, prev) {\n        // transform rx, ry, and x-axis rotation\n        var r = (0, _geom.transformEllipse)(p[0], p[1], p[2], matrix);\n\n        var sweepFlag = p[4];\n        if (matrix[0] * matrix[3] - matrix[1] * matrix[2] < 0) {\n          sweepFlag = sweepFlag ? '0' : '1';\n        }\n\n        // transform endpoint\n        var pts = [{ x: p[5], y: p[6] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n\n        if (r.isDegenerate) {\n          return {\n            command: 'L',\n            params: [newPts[0].x, newPts[0].y]\n          };\n        } else {\n          return {\n            command: 'A',\n            params: [r.rx, r.ry, r.ax, p[3], sweepFlag, newPts[0].x, newPts[0].y]\n          };\n        }\n      },\n      'C': function C(instruction, matrix, prev) {\n        var pts = [{ x: p[0], y: p[1] }, { x: p[2], y: p[3] }, { x: p[4], y: p[5] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n        return {\n          command: 'C',\n          params: [newPts[0].x, newPts[0].y, newPts[1].x, newPts[1].y, newPts[2].x, newPts[2].y]\n        };\n      },\n      'Z': function Z(instruction, matrix, prev) {\n        return {\n          command: 'Z',\n          params: []\n        };\n      },\n      'default': function _default(instruction, matrix, prev) {\n        var pts = [{ x: p[0], y: p[1] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n        var newParams = instruction.params.slice(0, instruction.params.length);\n        newParams.splice(0, 2, newPts[0].x, newPts[0].y);\n        return {\n          command: instruction.command,\n          params: newParams\n        };\n      }\n    };\n\n    if (transformer[instruction.command]) {\n      return transformer[instruction.command](instruction, matrix, prev);\n    } else {\n      return transformer['default'](instruction, matrix, prev);\n    }\n  };\n\n  var verbosify = function verbosify(keys, f) {\n    return function (a) {\n      var args = typeof a === 'object' ? keys.map(function (k) {\n        return a[k];\n      }) : arguments;\n      return f.apply(null, args);\n    };\n  };\n\n  var plus = function plus(instruction) {\n    return Path(push(_instructions, instruction));\n  };\n\n  return {\n    moveto: verbosify(['x', 'y'], function (x, y) {\n      return plus({\n        command: 'M',\n        params: [x, y]\n      });\n    }),\n    lineto: verbosify(['x', 'y'], function (x, y) {\n      return plus({\n        command: 'L',\n        params: [x, y]\n      });\n    }),\n    hlineto: verbosify(['x'], function (x) {\n      return plus({\n        command: 'H',\n        params: [x]\n      });\n    }),\n    vlineto: verbosify(['y'], function (y) {\n      return plus({\n        command: 'V',\n        params: [y]\n      });\n    }),\n    closepath: function closepath() {\n      return plus({\n        command: 'Z',\n        params: []\n      });\n    },\n    curveto: verbosify(['x1', 'y1', 'x2', 'y2', 'x', 'y'], function (x1, y1, x2, y2, x, y) {\n      return plus({\n        command: 'C',\n        params: [x1, y1, x2, y2, x, y]\n      });\n    }),\n    smoothcurveto: verbosify(['x2', 'y2', 'x', 'y'], function (x2, y2, x, y) {\n      return plus({\n        command: 'S',\n        params: [x2, y2, x, y]\n      });\n    }),\n    qcurveto: verbosify(['x1', 'y1', 'x', 'y'], function (x1, y1, x, y) {\n      return plus({\n        command: 'Q',\n        params: [x1, y1, x, y]\n      });\n    }),\n    smoothqcurveto: verbosify(['x', 'y'], function (x, y) {\n      return plus({\n        command: 'T',\n        params: [x, y]\n      });\n    }),\n    arc: verbosify(['rx', 'ry', 'xrot', 'largeArcFlag', 'sweepFlag', 'x', 'y'], function (rx, ry, xrot, largeArcFlag, sweepFlag, x, y) {\n      return plus({\n        command: 'A',\n        params: [rx, ry, xrot, largeArcFlag, sweepFlag, x, y]\n      });\n    }),\n    translate: verbosify(['dx', 'dy'], function () {\n      var dx = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n      var dy = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n      if (dx !== 0 || dx !== 0) {\n        var _ret = (function () {\n          var prev = [0, 0];\n          var matrix = [1, 0, 0, 1, dx, dy];\n          var newInstructions = _instructions.map(function (instruction) {\n            var p = transformParams(instruction, matrix, prev);\n            prev = point(instruction, prev);\n            return p;\n          });\n          return {\n            v: Path(newInstructions)\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      } else {\n        return Path(_instructions);\n      }\n    }),\n    rotate: verbosify(['angle', 'rx', 'ry'], function (angle) {\n      var rx = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n      var ry = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n      if (angle !== 0) {\n        var _ret2 = (function () {\n          var prev = undefined;\n          var matrix = undefined;\n          var newInstructions = _instructions;\n\n          if (rx !== 0 && ry !== 0) {\n            prev = [0, 0];\n            matrix = [1, 0, 0, 1, -rx, -ry];\n            newInstructions = newInstructions.map(function (instruction) {\n              var p = transformParams(instruction, matrix, prev);\n              prev = point(instruction, prev);\n              return p;\n            });\n          }\n\n          var rad = angle * Math.PI / 180;\n          var cos = Math.cos(rad);\n          var sin = Math.sin(rad);\n\n          prev = [0, 0];\n          matrix = [cos, sin, -sin, cos, 0, 0];\n          newInstructions = newInstructions.map(function (instruction) {\n            var p = transformParams(instruction, matrix, prev);\n            prev = point(instruction, prev);\n            return p;\n          });\n\n          if (rx !== 0 && ry !== 0) {\n            prev = [0, 0];\n            matrix = [1, 0, 0, 1, rx, ry];\n            newInstructions = newInstructions.map(function (instruction) {\n              var p = transformParams(instruction, matrix, prev);\n              prev = point(instruction, prev);\n              return p;\n            });\n          }\n\n          return {\n            v: Path(newInstructions)\n          };\n        })();\n\n        if (typeof _ret2 === 'object') return _ret2.v;\n      } else {\n        return Path(_instructions);\n      }\n    }),\n    scale: verbosify(['sx', 'sy'], function () {\n      var sx = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];\n      var sy = arguments.length <= 1 || arguments[1] === undefined ? sx : arguments[1];\n      return (function () {\n        if (sx !== 1 || sy !== 1) {\n          var _ret3 = (function () {\n            var prev = [0, 0];\n            var matrix = [sx, 0, 0, sy, 0, 0];\n            var newInstructions = _instructions.map(function (instruction) {\n              var p = transformParams(instruction, matrix, prev);\n              prev = point(instruction, prev);\n              return p;\n            });\n            return {\n              v: Path(newInstructions)\n            };\n          })();\n\n          if (typeof _ret3 === 'object') return _ret3.v;\n        } else {\n          return Path(_instructions);\n        }\n      })();\n    }),\n    shearX: verbosify(['angle'], function () {\n      var angle = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n      if (angle !== 0) {\n        var _ret4 = (function () {\n          var prev = [0, 0];\n          var matrix = [1, 0, Math.tan(angle * Math.PI / 180), 1, 0, 0];\n          var newInstructions = _instructions.map(function (instruction) {\n            var p = transformParams(instruction, matrix, prev);\n            prev = point(instruction, prev);\n            return p;\n          });\n          return {\n            v: Path(newInstructions)\n          };\n        })();\n\n        if (typeof _ret4 === 'object') return _ret4.v;\n      } else {\n        return Path(_instructions);\n      }\n    }),\n    shearY: verbosify(['angle'], function () {\n      var angle = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n      if (angle !== 0) {\n        var _ret5 = (function () {\n          var prev = [0, 0];\n          var matrix = [1, Math.tan(angle * Math.PI / 180), 0, 1, 0, 0];\n          var newInstructions = _instructions.map(function (instruction) {\n            var p = transformParams(instruction, matrix, prev);\n            prev = point(instruction, prev);\n            return p;\n          });\n          return {\n            v: Path(newInstructions)\n          };\n        })();\n\n        if (typeof _ret5 === 'object') return _ret5.v;\n      } else {\n        return Path(_instructions);\n      }\n    }),\n    print: function print() {\n      return _instructions.map(printInstrunction).join(' ');\n    },\n    toString: function toString() {\n      return undefined.print();\n    },\n    points: function points() {\n      var ps = [];\n      var prev = [0, 0];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _instructions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var instruction = _step.value;\n\n          var p = point(instruction, prev);\n          prev = p;\n          if (p) {\n            ps.push(p);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator['return']) {\n            _iterator['return']();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return ps;\n    },\n    instructions: function instructions() {\n      return _instructions.slice(0, _instructions.length);\n    },\n    connect: function connect(path) {\n      var ps = this.points();\n      var last = ps[ps.length - 1];\n      var first = path.points()[0];\n      var newInstructions = undefined;\n      if (_instructions[_instructions.length - 1].command !== 'Z') {\n        newInstructions = path.instructions().slice(1);\n        if (!areEqualPoints(last, first)) {\n          newInstructions.unshift({\n            command: \"L\",\n            params: first\n          });\n        }\n      } else {\n        newInstructions = path.instructions();\n      }\n      return Path(this.instructions().concat(newInstructions));\n    }\n  };\n};\n\nexports['default'] = function () {\n  return Path();\n};\n\nmodule.exports = exports['default'];","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; })();\n\nvar sq = function sq(x) {\n  return x * x;\n};\n\nvar distPointToPoint = function distPointToPoint(_ref, _ref3) {\n  var _ref2 = _slicedToArray(_ref, 2);\n\n  var ax = _ref2[0];\n  var ay = _ref2[1];\n\n  var _ref32 = _slicedToArray(_ref3, 2);\n\n  var bx = _ref32[0];\n  var by = _ref32[1];\n  return Math.sqrt(sq(ax - bx) + sq(ay - by));\n};\n\nvar distPointToParabol = function distPointToParabol(a, f) {\n  var p = distPointToPoint(a, f);\n\n  return p == 0 ? Infinity : sq(p) / (2 * Math.abs(a[1] - f[1]));\n};\n\nvar circumCenter = function circumCenter(a, b, c) {\n  var d = (a[0] - c[0]) * (b[1] - c[1]) - (b[0] - c[0]) * (a[1] - c[1]);\n\n  if (d == 0) return [Infinity, Infinity];\n\n  var xc = (((a[0] - c[0]) * (a[0] + c[0]) + (a[1] - c[1]) * (a[1] + c[1])) / 2 * (b[1] - c[1]) - ((b[0] - c[0]) * (b[0] + c[0]) + (b[1] - c[1]) * (b[1] + c[1])) / 2 * (a[1] - c[1])) / d;\n  var yc = (((b[0] - c[0]) * (b[0] + c[0]) + (b[1] - c[1]) * (b[1] + c[1])) / 2 * (a[0] - c[0]) - ((a[0] - c[0]) * (a[0] + c[0]) + (a[1] - c[1]) * (a[1] + c[1])) / 2 * (b[0] - c[0])) / d;\n  return [xc, yc];\n};\n\nvar parabolsCrossX = function parabolsCrossX(fa, fb, q) {\n  if (fa[1] === fb[1]) return [(fa[0] + fb[0]) / 2, (fa[0] + fb[0]) / 2];\n\n  var s1 = (fa[1] * fb[0] - fa[0] * fb[1] + fa[0] * q - fb[0] * q + Math.sqrt((fa[0] * fa[0] + fa[1] * fa[1] - 2 * fa[0] * fb[0] + fb[0] * fb[0] - 2 * fa[1] * fb[1] + fb[1] * fb[1]) * (fa[1] * fb[1] - fa[1] * q - fb[1] * q + q * q))) / (fa[1] - fb[1]);\n  var s2 = (fa[1] * fb[0] - fa[0] * fb[1] + fa[0] * q - fb[0] * q - Math.sqrt((fa[0] * fa[0] + fa[1] * fa[1] - 2 * fa[0] * fb[0] + fb[0] * fb[0] - 2 * fa[1] * fb[1] + fb[1] * fb[1]) * (fa[1] * fb[1] - fa[1] * q - fb[1] * q + q * q))) / (fa[1] - fb[1]);\n\n  return s1 < s2 ? [s1, s2] : [s2, s1];\n};\n\nvar doHalflinesCross = function doHalflinesCross(sa, sb) {\n  var approx = arguments.length <= 2 || arguments[2] === undefined ? 1e-10 : arguments[2];\n  //sa, sb are Segment instance\n  var dx = sb.ps[0] - sa.ps[0];\n  var dy = sb.ps[1] - sa.ps[1];\n\n  if (sa.m == Infinity) return sa.hp * (sb.m * dx - dy) <= approx && sb.vec[0] * dx <= approx;\n  if (sb.m == Infinity) return sb.hp * (sa.m * dx - dy) >= -approx && sa.vec[0] * dx >= -approx;\n\n  var det = sb.vec[0] * sa.vec[1] - sb.vec[1] * sa.vec[0];\n\n  if (det === 0) return false;\n\n  var u = (dy * sb.vec[0] - dx * sb.vec[1]) / det;\n  var v = (dy * sa.vec[0] - dx * sa.vec[1]) / det;\n\n  return u >= -approx && v >= approx || u >= approx && v >= -approx;\n};\n\nvar matrixTransform = function matrixTransform(points, matrix) {\n  return points.map(function (point) {\n    return {\n      x: point.x * matrix[0] + point.y * matrix[2] + matrix[4],\n      y: point.x * matrix[1] + point.y * matrix[3] + matrix[5]\n    };\n  });\n};\n\nvar transformEllipse = function transformEllipse(rx, ry, ax, m) {\n  var torad = Math.PI / 180;\n  var epsilon = 0.0000000001;\n\n  var c = Math.cos(ax * torad),\n      s = Math.sin(ax * torad);\n  var ma = [rx * (m[0] * c + m[2] * s), rx * (m[1] * c + m[3] * s), ry * (-m[0] * s + m[2] * c), ry * (-m[1] * s + m[3] * c)];\n\n  var J = ma[0] * ma[0] + ma[2] * ma[2],\n      K = ma[1] * ma[1] + ma[3] * ma[3];\n\n  var D = ((ma[0] - ma[3]) * (ma[0] - ma[3]) + (ma[2] + ma[1]) * (ma[2] + ma[1])) * ((ma[0] + ma[3]) * (ma[0] + ma[3]) + (ma[2] - ma[1]) * (ma[2] - ma[1]));\n\n  var JK = (J + K) / 2;\n\n  if (D < epsilon * JK) {\n    return {\n      rx: Math.sqrt(JK),\n      ry: Math.sqrt(JK),\n      ax: 0,\n      isDegenerate: false\n    };\n  }\n\n  var L = ma[0] * ma[1] + ma[2] * ma[3];\n  D = Math.sqrt(D);\n\n  var l1 = JK + D / 2,\n      l2 = JK - D / 2;\n\n  var newAx = undefined,\n      newRx = undefined,\n      newRy = undefined;\n  newAx = Math.abs(L) < epsilon && Math.abs(l1 - K) < epsilon ? 90 : Math.atan(Math.abs(L) > Math.abs(l1 - K) ? (l1 - J) / L : L / (l1 - K)) * 180 / Math.PI;\n\n  if (newAx >= 0) {\n    newRx = Math.sqrt(l1);\n    newRy = Math.sqrt(l2);\n  } else {\n    newAx += 90;\n    newRx = Math.sqrt(l2);\n    newRy = Math.sqrt(l1);\n  }\n\n  return {\n    rx: newRx,\n    ry: newRy,\n    ax: newAx,\n    isDegenerate: newRx < epsilon * newRy || newRy < epsilon * newRx\n  };\n};\n\nexports[\"default\"] = { distPointToPoint: distPointToPoint, distPointToParabol: distPointToParabol, circumCenter: circumCenter,\n  parabolsCrossX: parabolsCrossX, doHalflinesCross: doHalflinesCross, matrixTransform: matrixTransform, transformEllipse: transformEllipse };\nmodule.exports = exports[\"default\"];","import { BaseEntity, BaseListener } from \"./BaseEntity\";\nimport { DiagramModel } from \"./models/DiagramModel\";\nimport * as _ from \"lodash\";\nimport { BaseModel, BaseModelListener } from \"./models/BaseModel\";\nimport { NodeModel } from \"./models/NodeModel\";\nimport { PointModel } from \"./models/PointModel\";\nimport { PortModel } from \"./models/PortModel\";\nimport { LinkModel } from \"./models/LinkModel\";\nimport { AbstractLabelFactory } from \"./factories/AbstractLabelFactory\";\nimport { AbstractLinkFactory } from \"./factories/AbstractLinkFactory\";\nimport { AbstractNodeFactory } from \"./factories/AbstractNodeFactory\";\nimport { AbstractPortFactory } from \"./factories/AbstractPortFactory\";\nimport { DefaultLinkFactory, DefaultNodeFactory } from \"./main\";\nimport { ROUTING_SCALING_FACTOR } from \"./routing/PathFinding\";\nimport { DefaultPortFactory } from \"./defaults/factories/DefaultPortFactory\";\nimport { LabelModel } from \"./models/LabelModel\";\nimport { DefaultLabelFactory } from \"./defaults/factories/DefaultLabelFactory\";\nimport { Toolkit } from \"./Toolkit\";\n/**\n * @author Dylan Vorster\n */\nexport interface DiagramEngineListener extends BaseListener {\n\tportFactoriesUpdated?(): void;\n\n\tnodeFactoriesUpdated?(): void;\n\n\tlinkFactoriesUpdated?(): void;\n\n\tlabelFactoriesUpdated?(): void;\n\n\trepaintCanvas?(): void;\n}\n\n/**\n * Passed as a parameter to the DiagramWidget\n */\nexport class DiagramEngine extends BaseEntity<DiagramEngineListener> {\n\tnodeFactories: { [s: string]: AbstractNodeFactory };\n\tlinkFactories: { [s: string]: AbstractLinkFactory };\n\tportFactories: { [s: string]: AbstractPortFactory };\n\tlabelFactories: { [s: string]: AbstractLabelFactory };\n\n\tdiagramModel: DiagramModel;\n\tcanvas: Element;\n\tpaintableWidgets: {};\n\tlinksThatHaveInitiallyRendered: {};\n\tnodesRendered: boolean;\n\tmaxNumberPointsPerLink: number;\n\tsmartRouting: boolean;\n\n\t// calculated only when smart routing is active\n\tcanvasMatrix: number[][] = [];\n\troutingMatrix: number[][] = [];\n\t// used when at least one element has negative coordinates\n\thAdjustmentFactor: number = 0;\n\tvAdjustmentFactor: number = 0;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.diagramModel = new DiagramModel();\n\t\tthis.nodeFactories = {};\n\t\tthis.linkFactories = {};\n\t\tthis.portFactories = {};\n\t\tthis.labelFactories = {};\n\t\tthis.canvas = null;\n\t\tthis.paintableWidgets = null;\n\t\tthis.linksThatHaveInitiallyRendered = {};\n\n\t\tif (Toolkit.TESTING) {\n\t\t\tToolkit.TESTING_UID = 0;\n\n\t\t\t//pop it onto the window so our E2E helpers can find it\n\t\t\tif (window) {\n\t\t\t\t(window as any)[\"diagram_instance\"] = this;\n\t\t\t}\n\t\t}\n\t}\n\n\tinstallDefaultFactories() {\n\t\tthis.registerNodeFactory(new DefaultNodeFactory());\n\t\tthis.registerLinkFactory(new DefaultLinkFactory());\n\t\tthis.registerPortFactory(new DefaultPortFactory());\n\t\tthis.registerLabelFactory(new DefaultLabelFactory());\n\t}\n\n\trepaintCanvas() {\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.repaintCanvas) {\n\t\t\t\tlistener.repaintCanvas();\n\t\t\t}\n\t\t});\n\t}\n\n\tclearRepaintEntities() {\n\t\tthis.paintableWidgets = null;\n\t}\n\n\tenableRepaintEntities(entities: BaseModel<BaseEntity, BaseModelListener>[]) {\n\t\tthis.paintableWidgets = {};\n\t\tentities.forEach(entity => {\n\t\t\t//if a node is requested to repaint, add all of its links\n\t\t\tif (entity instanceof NodeModel) {\n\t\t\t\t_.forEach(entity.getPorts(), port => {\n\t\t\t\t\t_.forEach(port.getLinks(), link => {\n\t\t\t\t\t\tthis.paintableWidgets[link.getID()] = true;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (entity instanceof PointModel) {\n\t\t\t\tthis.paintableWidgets[entity.getLink().getID()] = true;\n\t\t\t}\n\n\t\t\tthis.paintableWidgets[entity.getID()] = true;\n\t\t});\n\t}\n\n\t/**\n\t * Checks to see if a model is locked by running through\n\t * its parents to see if they are locked first\n\t */\n\tisModelLocked(model: BaseEntity<BaseListener>) {\n\t\t//always check the diagram model\n\t\tif (this.diagramModel.isLocked()) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn model.isLocked();\n\t}\n\n\trecalculatePortsVisually() {\n\t\tthis.nodesRendered = false;\n\t\tthis.linksThatHaveInitiallyRendered = {};\n\t}\n\n\tcanEntityRepaint(baseModel: BaseModel<BaseEntity, BaseModelListener>) {\n\t\t//no rules applied, allow repaint\n\t\tif (this.paintableWidgets === null) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.paintableWidgets[baseModel.getID()] !== undefined;\n\t}\n\n\tsetCanvas(canvas: Element | null) {\n\t\tthis.canvas = canvas;\n\t}\n\n\tsetDiagramModel(model: DiagramModel) {\n\t\tthis.diagramModel = model;\n\t\tthis.recalculatePortsVisually();\n\t}\n\n\tgetDiagramModel(): DiagramModel {\n\t\treturn this.diagramModel;\n\t}\n\n\t//!-------------- FACTORIES ------------\n\n\tgetNodeFactories(): { [s: string]: AbstractNodeFactory } {\n\t\treturn this.nodeFactories;\n\t}\n\n\tgetLinkFactories(): { [s: string]: AbstractLinkFactory } {\n\t\treturn this.linkFactories;\n\t}\n\n\tgetLabelFactories(): { [s: string]: AbstractLabelFactory } {\n\t\treturn this.labelFactories;\n\t}\n\n\tregisterLabelFactory(factory: AbstractLabelFactory) {\n\t\tthis.labelFactories[factory.getType()] = factory;\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.labelFactoriesUpdated) {\n\t\t\t\tlistener.labelFactoriesUpdated();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterPortFactory(factory: AbstractPortFactory) {\n\t\tthis.portFactories[factory.getType()] = factory;\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.portFactoriesUpdated) {\n\t\t\t\tlistener.portFactoriesUpdated();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterNodeFactory(factory: AbstractNodeFactory) {\n\t\tthis.nodeFactories[factory.getType()] = factory;\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.nodeFactoriesUpdated) {\n\t\t\t\tlistener.nodeFactoriesUpdated();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterLinkFactory(factory: AbstractLinkFactory) {\n\t\tthis.linkFactories[factory.getType()] = factory;\n\t\tthis.iterateListeners(listener => {\n\t\t\tif (listener.linkFactoriesUpdated) {\n\t\t\t\tlistener.linkFactoriesUpdated();\n\t\t\t}\n\t\t});\n\t}\n\n\tgetPortFactory(type: string): AbstractPortFactory {\n\t\tif (this.portFactories[type]) {\n\t\t\treturn this.portFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for port of type: [${type}]`);\n\t}\n\n\tgetNodeFactory(type: string): AbstractNodeFactory {\n\t\tif (this.nodeFactories[type]) {\n\t\t\treturn this.nodeFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for node of type: [${type}]`);\n\t}\n\n\tgetLinkFactory(type: string): AbstractLinkFactory {\n\t\tif (this.linkFactories[type]) {\n\t\t\treturn this.linkFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for link of type: [${type}]`);\n\t}\n\n\tgetLabelFactory(type: string): AbstractLabelFactory {\n\t\tif (this.labelFactories[type]) {\n\t\t\treturn this.labelFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for label of type: [${type}]`);\n\t}\n\n\tgetFactoryForNode(node: NodeModel): AbstractNodeFactory | null {\n\t\treturn this.getNodeFactory(node.getType());\n\t}\n\n\tgetFactoryForLink(link: LinkModel): AbstractLinkFactory | null {\n\t\treturn this.getLinkFactory(link.getType());\n\t}\n\n\tgetFactoryForLabel(label: LabelModel): AbstractLabelFactory | null {\n\t\treturn this.getLabelFactory(label.getType());\n\t}\n\n\tgenerateWidgetForLink(link: LinkModel): JSX.Element | null {\n\t\tvar linkFactory = this.getFactoryForLink(link);\n\t\tif (!linkFactory) {\n\t\t\tthrow new Error(\"Cannot find link factory for link: \" + link.getType());\n\t\t}\n\t\treturn linkFactory.generateReactWidget(this, link);\n\t}\n\n\tgenerateWidgetForNode(node: NodeModel): JSX.Element | null {\n\t\tvar nodeFactory = this.getFactoryForNode(node);\n\t\tif (!nodeFactory) {\n\t\t\tthrow new Error(\"Cannot find widget factory for node: \" + node.getType());\n\t\t}\n\t\treturn nodeFactory.generateReactWidget(this, node);\n\t}\n\n\tgetRelativeMousePoint(event): { x: number; y: number } {\n\t\tvar point = this.getRelativePoint(event.clientX, event.clientY);\n\t\treturn {\n\t\t\tx: (point.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\n\t\t\ty: (point.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\n\t\t};\n\t}\n\n\tgetRelativePoint(x, y) {\n\t\tvar canvasRect = this.canvas.getBoundingClientRect();\n\t\treturn { x: x - canvasRect.left, y: y - canvasRect.top };\n\t}\n\n\tgetNodeElement(node: NodeModel): Element {\n\t\tconst selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n\t\tif (selector === null) {\n\t\t\tthrow new Error(\"Cannot find Node element with nodeID: [\" + node.getID() + \"]\");\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetNodePortElement(port: PortModel): any {\n\t\tvar selector = this.canvas.querySelector(\n\t\t\t`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`\n\t\t);\n\t\tif (selector === null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Cannot find Node Port element with nodeID: [\" +\n\t\t\t\t\tport.getParent().getID() +\n\t\t\t\t\t\"] and name: [\" +\n\t\t\t\t\tport.getName() +\n\t\t\t\t\t\"]\"\n\t\t\t);\n\t\t}\n\t\treturn selector;\n\t}\n\n\tgetPortCenter(port: PortModel) {\n\t\tvar sourceElement = this.getNodePortElement(port);\n\t\tvar sourceRect = sourceElement.getBoundingClientRect();\n\n\t\tvar rel = this.getRelativePoint(sourceRect.left, sourceRect.top);\n\n\t\treturn {\n\t\t\tx:\n\t\t\t\tsourceElement.offsetWidth / 2 +\n\t\t\t\t(rel.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\n\t\t\ty:\n\t\t\t\tsourceElement.offsetHeight / 2 +\n\t\t\t\t(rel.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\n\t\t};\n\t}\n\n\t/**\n\t * Calculate rectangular coordinates of the port passed in.\n\t */\n\tgetPortCoords(\n\t\tport: PortModel\n\t): {\n\t\tx: number;\n\t\ty: number;\n\t\twidth: number;\n\t\theight: number;\n\t} {\n\t\tconst sourceElement = this.getNodePortElement(port);\n\t\tconst sourceRect = sourceElement.getBoundingClientRect();\n\t\tconst canvasRect = this.canvas.getBoundingClientRect() as ClientRect;\n\n\t\treturn {\n\t\t\tx:\n\t\t\t\t(sourceRect.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0) -\n\t\t\t\tcanvasRect.left,\n\t\t\ty:\n\t\t\t\t(sourceRect.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0) -\n\t\t\t\tcanvasRect.top,\n\t\t\twidth: sourceRect.width,\n\t\t\theight: sourceRect.height\n\t\t};\n\t}\n\n\t/**\n\t * Determine the width and height of the node passed in.\n\t * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n\t */\n\tgetNodeDimensions(node: NodeModel): { width: number; height: number } {\n\t\tif (!this.canvas) {\n\t\t\treturn {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t};\n\t\t}\n\n\t\tconst nodeElement = this.getNodeElement(node);\n\t\tconst nodeRect = nodeElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\twidth: nodeRect.width,\n\t\t\theight: nodeRect.height\n\t\t};\n\t}\n\n\tgetMaxNumberPointsPerLink(): number {\n\t\treturn this.maxNumberPointsPerLink;\n\t}\n\n\tsetMaxNumberPointsPerLink(max: number) {\n\t\tthis.maxNumberPointsPerLink = max;\n\t}\n\n\tisSmartRoutingEnabled() {\n\t\treturn !!this.smartRouting;\n\t}\n\tsetSmartRoutingStatus(status: boolean) {\n\t\tthis.smartRouting = status;\n\t}\n\n\t/**\n\t * A representation of the canvas in the following format:\n\t *\n\t * +-----------------+\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * +-----------------+\n\t *\n\t * In which all walkable points are marked by zeros.\n\t * It uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.\n\t */\n\tgetCanvasMatrix(): number[][] {\n\t\tif (this.canvasMatrix.length === 0) {\n\t\t\tthis.calculateCanvasMatrix();\n\t\t}\n\n\t\treturn this.canvasMatrix;\n\t}\n\tcalculateCanvasMatrix() {\n\t\tconst {\n\t\t\twidth: canvasWidth,\n\t\t\thAdjustmentFactor,\n\t\t\theight: canvasHeight,\n\t\t\tvAdjustmentFactor\n\t\t} = this.calculateMatrixDimensions();\n\n\t\tthis.hAdjustmentFactor = hAdjustmentFactor;\n\t\tthis.vAdjustmentFactor = vAdjustmentFactor;\n\n\t\tconst matrixWidth = Math.ceil(canvasWidth / ROUTING_SCALING_FACTOR);\n\t\tconst matrixHeight = Math.ceil(canvasHeight / ROUTING_SCALING_FACTOR);\n\n\t\tthis.canvasMatrix = _.range(0, matrixHeight).map(() => {\n\t\t\treturn new Array(matrixWidth).fill(0);\n\t\t});\n\t}\n\n\t/**\n\t * A representation of the canvas in the following format:\n\t *\n\t * +-----------------+\n\t * | 0 0 1 1 0 0 0 0 |\n\t * | 0 0 1 1 0 0 1 1 |\n\t * | 0 0 0 0 0 0 1 1 |\n\t * | 1 1 0 0 0 0 0 0 |\n\t * | 1 1 0 0 0 0 0 0 |\n\t * +-----------------+\n\t *\n\t * In which all points blocked by a node (and its ports) are\n\t * marked as 1; points were there is nothing (ie, free) receive 0.\n\t */\n\tgetRoutingMatrix(): number[][] {\n\t\tif (this.routingMatrix.length === 0) {\n\t\t\tthis.calculateRoutingMatrix();\n\t\t}\n\n\t\treturn this.routingMatrix;\n\t}\n\tcalculateRoutingMatrix(): void {\n\t\tconst matrix = _.cloneDeep(this.getCanvasMatrix());\n\n\t\t// nodes need to be marked as blocked points\n\t\tthis.markNodes(matrix);\n\t\t// same thing for ports\n\t\tthis.markPorts(matrix);\n\n\t\tthis.routingMatrix = matrix;\n\t}\n\n\t/**\n\t * The routing matrix does not have negative indexes, but elements could be negatively positioned.\n\t * We use the functions below to translate back and forth between these coordinates, relying on the\n\t * calculated values of hAdjustmentFactor and vAdjustmentFactor.\n\t */\n\ttranslateRoutingX(x: number, reverse: boolean = false) {\n\t\treturn x + this.hAdjustmentFactor * (reverse ? -1 : 1);\n\t}\n\ttranslateRoutingY(y: number, reverse: boolean = false) {\n\t\treturn y + this.vAdjustmentFactor * (reverse ? -1 : 1);\n\t}\n\n\t/**\n\t * Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\n\t * to find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.\n\t */\n\tcalculateMatrixDimensions = (): {\n\t\twidth: number;\n\t\thAdjustmentFactor: number;\n\t\theight: number;\n\t\tvAdjustmentFactor: number;\n\t} => {\n\t\tconst allNodesCoords = _.values(this.diagramModel.nodes).map(item => ({\n\t\t\tx: item.x,\n\t\t\twidth: item.width,\n\t\t\ty: item.y,\n\t\t\theight: item.height\n\t\t}));\n\n\t\tconst allLinks = _.values(this.diagramModel.links);\n\t\tconst allPortsCoords = _.flatMap(allLinks.map(link => [link.sourcePort, link.targetPort]))\n\t\t\t.filter(port => port !== null)\n\t\t\t.map(item => ({\n\t\t\t\tx: item.x,\n\t\t\t\twidth: item.width,\n\t\t\t\ty: item.y,\n\t\t\t\theight: item.height\n\t\t\t}));\n\t\tconst allPointsCoords = _.flatMap(allLinks.map(link => link.points)).map(item => ({\n\t\t\t// points don't have width/height, so let's just use 0\n\t\t\tx: item.x,\n\t\t\twidth: 0,\n\t\t\ty: item.y,\n\t\t\theight: 0\n\t\t}));\n\n\t\tconst canvas = this.canvas as HTMLDivElement;\n\t\tconst minX =\n\t\t\tMath.floor(\n\t\t\t\tMath.min(_.minBy(_.concat(allNodesCoords, allPortsCoords, allPointsCoords), item => item.x).x, 0) /\n\t\t\t\t\tROUTING_SCALING_FACTOR\n\t\t\t) * ROUTING_SCALING_FACTOR;\n\t\tconst maxXElement = _.maxBy(\n\t\t\t_.concat(allNodesCoords, allPortsCoords, allPointsCoords),\n\t\t\titem => item.x + item.width\n\t\t);\n\t\tconst maxX = Math.max(maxXElement.x + maxXElement.width, canvas.offsetWidth);\n\n\t\tconst minY =\n\t\t\tMath.floor(\n\t\t\t\tMath.min(_.minBy(_.concat(allNodesCoords, allPortsCoords, allPointsCoords), item => item.y).y, 0) /\n\t\t\t\t\tROUTING_SCALING_FACTOR\n\t\t\t) * ROUTING_SCALING_FACTOR;\n\t\tconst maxYElement = _.maxBy(\n\t\t\t_.concat(allNodesCoords, allPortsCoords, allPointsCoords),\n\t\t\titem => item.y + item.height\n\t\t);\n\t\tconst maxY = Math.max(maxYElement.y + maxYElement.height, canvas.offsetHeight);\n\n\t\treturn {\n\t\t\twidth: Math.ceil(Math.abs(minX) + maxX),\n\t\t\thAdjustmentFactor: Math.abs(minX) / ROUTING_SCALING_FACTOR + 1,\n\t\t\theight: Math.ceil(Math.abs(minY) + maxY),\n\t\t\tvAdjustmentFactor: Math.abs(minY) / ROUTING_SCALING_FACTOR + 1\n\t\t};\n\t};\n\n\t/**\n\t * Updates (by reference) where nodes will be drawn on the matrix passed in.\n\t */\n\tmarkNodes = (matrix: number[][]): void => {\n\t\t_.values(this.diagramModel.nodes).forEach(node => {\n\t\t\tconst startX = Math.floor(node.x / ROUTING_SCALING_FACTOR);\n\t\t\tconst endX = Math.ceil((node.x + node.width) / ROUTING_SCALING_FACTOR);\n\t\t\tconst startY = Math.floor(node.y / ROUTING_SCALING_FACTOR);\n\t\t\tconst endY = Math.ceil((node.y + node.height) / ROUTING_SCALING_FACTOR);\n\n\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\n\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\n\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Updates (by reference) where ports will be drawn on the matrix passed in.\n\t */\n\tmarkPorts = (matrix: number[][]): void => {\n\t\tconst allElements = _.flatMap(\n\t\t\t_.values(this.diagramModel.links).map(link => [].concat(link.sourcePort, link.targetPort))\n\t\t);\n\t\tallElements.filter(port => port !== null).forEach(port => {\n\t\t\tconst startX = Math.floor(port.x / ROUTING_SCALING_FACTOR);\n\t\t\tconst endX = Math.ceil((port.x + port.width) / ROUTING_SCALING_FACTOR);\n\t\t\tconst startY = Math.floor(port.y / ROUTING_SCALING_FACTOR);\n\t\t\tconst endY = Math.ceil((port.y + port.height) / ROUTING_SCALING_FACTOR);\n\n\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\n\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\n\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tmarkMatrixPoint = (matrix: number[][], x: number, y: number) => {\n\t\tif (matrix[y] !== undefined && matrix[y][x] !== undefined) {\n\t\t\tmatrix[y][x] = 1;\n\t\t}\n\t};\n\n\tzoomToFit() {\n\t\tconst xFactor = this.canvas.clientWidth / this.canvas.scrollWidth;\n\t\tconst yFactor = this.canvas.clientHeight / this.canvas.scrollHeight;\n\t\tconst zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n\n\t\tthis.diagramModel.setZoomLevel(this.diagramModel.getZoomLevel() * zoomFactor);\n\t\tthis.diagramModel.setOffset(0, 0);\n\t\tthis.repaintCanvas();\n\t}\n}\n","import * as React from \"react\";\nimport { DefaultLinkWidget } from \"../widgets/DefaultLinkWidget\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { AbstractLinkFactory } from \"../../factories/AbstractLinkFactory\";\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\n\n/**\n * @author Dylan Vorster\n */\nexport class DefaultLinkFactory extends AbstractLinkFactory<DefaultLinkModel> {\n\tconstructor() {\n\t\tsuper(\"default\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, link: DefaultLinkModel): JSX.Element {\n\t\treturn React.createElement(DefaultLinkWidget, {\n\t\t\tlink: link,\n\t\t\tdiagramEngine: diagramEngine\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultLinkModel {\n\t\treturn new DefaultLinkModel();\n\t}\n\n\tgenerateLinkSegment(model: DefaultLinkModel, widget: DefaultLinkWidget, selected: boolean, path: string) {\n\t\treturn (\n\t\t\t<path\n\t\t\t\tclassName={selected ? widget.bem(\"--path-selected\") : \"\"}\n\t\t\t\tstrokeWidth={model.width}\n\t\t\t\tstroke={model.color}\n\t\t\t\td={path}\n\t\t\t/>\n\t\t);\n\t}\n}\n","import { DefaultNodeModel } from \"../models/DefaultNodeModel\";\nimport * as React from \"react\";\nimport { DefaultNodeWidget } from \"../widgets/DefaultNodeWidget\";\nimport { DiagramEngine } from \"../../DiagramEngine\";\nimport { AbstractNodeFactory } from \"../../factories/AbstractNodeFactory\";\n/**\n * @author Dylan Vorster\n */\nexport class DefaultNodeFactory extends AbstractNodeFactory<DefaultNodeModel> {\n\tconstructor() {\n\t\tsuper(\"default\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: DiagramEngine, node: DefaultNodeModel): JSX.Element {\n\t\treturn React.createElement(DefaultNodeWidget, {\n\t\t\tnode: node,\n\t\t\tdiagramEngine: diagramEngine\n\t\t});\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultNodeModel {\n\t\treturn new DefaultNodeModel();\n\t}\n}\n","import * as React from \"react\";\nimport { DiagramEngine } from \"../DiagramEngine\";\nimport * as _ from \"lodash\";\nimport { LinkLayerWidget } from \"./layers/LinkLayerWidget\";\nimport { NodeLayerWidget } from \"./layers/NodeLayerWidget\";\nimport { Toolkit } from \"../Toolkit\";\nimport { BaseAction } from \"../actions/BaseAction\";\nimport { MoveCanvasAction } from \"../actions/MoveCanvasAction\";\nimport { MoveItemsAction } from \"../actions/MoveItemsAction\";\nimport { SelectingAction } from \"../actions/SelectingAction\";\nimport { NodeModel } from \"../models/NodeModel\";\nimport { PointModel } from \"../models/PointModel\";\nimport { PortModel } from \"../models/PortModel\";\nimport { LinkModel } from \"../models/LinkModel\";\nimport { SelectionModel } from \"../models/SelectionModel\";\nimport { BaseModel, BaseModelListener } from \"../models/BaseModel\";\nimport { BaseEntity } from \"../BaseEntity\";\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\n\nexport interface DiagramProps extends BaseWidgetProps {\n\tdiagramEngine: DiagramEngine;\n\n\tallowLooseLinks?: boolean;\n\tallowCanvasTranslation?: boolean;\n\tallowCanvasZoom?: boolean;\n\tinverseZoom?: boolean;\n\tmaxNumberPointsPerLink?: number;\n\tsmartRouting?: boolean;\n\n\tactionStartedFiring?: (action: BaseAction) => boolean;\n\tactionStillFiring?: (action: BaseAction) => void;\n\tactionStoppedFiring?: (action: BaseAction) => void;\n\n\tdeleteKeys?: number[];\n}\n\nexport interface DiagramState {\n\taction: BaseAction | null;\n\twasMoved: boolean;\n\trenderedNodes: boolean;\n\twindowListener: any;\n\tdiagramEngineListener: any;\n\tdocument: any;\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class DiagramWidget extends BaseWidget<DiagramProps, DiagramState> {\n\tpublic static defaultProps: DiagramProps = {\n\t\tdiagramEngine: null,\n\t\tallowLooseLinks: true,\n\t\tallowCanvasTranslation: true,\n\t\tallowCanvasZoom: true,\n\t\tinverseZoom: false,\n\t\tmaxNumberPointsPerLink: Infinity, // backwards compatible default\n\t\tsmartRouting: false,\n\t\tdeleteKeys: [46, 8]\n\t};\n\n\tonKeyUpPointer: (this: Window, ev: KeyboardEvent) => void = null;\n\n\tconstructor(props: DiagramProps) {\n\t\tsuper(\"srd-diagram\", props);\n\t\tthis.onMouseMove = this.onMouseMove.bind(this);\n\t\tthis.onMouseUp = this.onMouseUp.bind(this);\n\t\tthis.state = {\n\t\t\taction: null,\n\t\t\twasMoved: false,\n\t\t\trenderedNodes: false,\n\t\t\twindowListener: null,\n\t\t\tdiagramEngineListener: null,\n\t\t\tdocument: null\n\t\t};\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.props.diagramEngine.removeListener(this.state.diagramEngineListener);\n\t\tthis.props.diagramEngine.setCanvas(null);\n\t\twindow.removeEventListener(\"keyup\", this.onKeyUpPointer);\n\t\twindow.removeEventListener(\"mouseUp\", this.onMouseUp);\n\t\twindow.removeEventListener(\"mouseMove\", this.onMouseMove);\n\t}\n\n\tcomponentWillReceiveProps(nextProps: DiagramProps) {\n\t\tif (this.props.diagramEngine !== nextProps.diagramEngine) {\n\t\t\tthis.props.diagramEngine.removeListener(this.state.diagramEngineListener);\n\t\t\tconst diagramEngineListener = nextProps.diagramEngine.addListener({\n\t\t\t\trepaintCanvas: () => this.forceUpdate()\n\t\t\t});\n\t\t\tthis.setState({ diagramEngineListener });\n\t\t}\n\t}\n\n\tcomponentWillUpdate(nextProps: DiagramProps) {\n\t\tif (this.props.diagramEngine.diagramModel.id !== nextProps.diagramEngine.diagramModel.id) {\n\t\t\tthis.setState({ renderedNodes: false });\n\t\t\tnextProps.diagramEngine.diagramModel.rendered = true;\n\t\t}\n\t\tif (!nextProps.diagramEngine.diagramModel.rendered) {\n\t\t\tthis.setState({ renderedNodes: false });\n\t\t\tnextProps.diagramEngine.diagramModel.rendered = true;\n\t\t}\n\t}\n\n\tcomponentDidUpdate() {\n\t\tif (!this.state.renderedNodes) {\n\t\t\tthis.setState({\n\t\t\t\trenderedNodes: true\n\t\t\t});\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.onKeyUpPointer = this.onKeyUp.bind(this);\n\n\t\t//add a keyboard listener\n\t\tthis.setState({\n\t\t\tdocument: document,\n\t\t\trenderedNodes: true,\n\t\t\tdiagramEngineListener: this.props.diagramEngine.addListener({\n\t\t\t\trepaintCanvas: () => {\n\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\n\t\twindow.addEventListener(\"keyup\", this.onKeyUpPointer, false);\n\n\t\t// dont focus the window when in test mode - jsdom fails\n\t\tif (process.env.NODE_ENV !== \"test\") {\n\t\t\twindow.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Gets a model and element under the mouse cursor\n\t */\n\tgetMouseElement(event): { model: BaseModel<BaseEntity, BaseModelListener>; element: Element } {\n\t\tvar target = event.target as Element;\n\t\tvar diagramModel = this.props.diagramEngine.diagramModel;\n\n\t\t//is it a port\n\t\tvar element = Toolkit.closest(target, \".port[data-name]\");\n\t\tif (element) {\n\t\t\tvar nodeElement = Toolkit.closest(target, \".node[data-nodeid]\") as HTMLElement;\n\t\t\treturn {\n\t\t\t\tmodel: diagramModel\n\t\t\t\t\t.getNode(nodeElement.getAttribute(\"data-nodeid\"))\n\t\t\t\t\t.getPort(element.getAttribute(\"data-name\")),\n\t\t\t\telement: element\n\t\t\t};\n\t\t}\n\n\t\t//look for a point\n\t\telement = Toolkit.closest(target, \".point[data-id]\");\n\t\tif (element) {\n\t\t\treturn {\n\t\t\t\tmodel: diagramModel\n\t\t\t\t\t.getLink(element.getAttribute(\"data-linkid\"))\n\t\t\t\t\t.getPointModel(element.getAttribute(\"data-id\")),\n\t\t\t\telement: element\n\t\t\t};\n\t\t}\n\n\t\t//look for a link\n\t\telement = Toolkit.closest(target, \"[data-linkid]\");\n\t\tif (element) {\n\t\t\treturn {\n\t\t\t\tmodel: diagramModel.getLink(element.getAttribute(\"data-linkid\")),\n\t\t\t\telement: element\n\t\t\t};\n\t\t}\n\n\t\t//look for a node\n\t\telement = Toolkit.closest(target, \".node[data-nodeid]\");\n\t\tif (element) {\n\t\t\treturn {\n\t\t\t\tmodel: diagramModel.getNode(element.getAttribute(\"data-nodeid\")),\n\t\t\t\telement: element\n\t\t\t};\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfireAction() {\n\t\tif (this.state.action && this.props.actionStillFiring) {\n\t\t\tthis.props.actionStillFiring(this.state.action);\n\t\t}\n\t}\n\n\tstopFiringAction(shouldSkipEvent?: boolean) {\n\t\tif (this.props.actionStoppedFiring && !shouldSkipEvent) {\n\t\t\tthis.props.actionStoppedFiring(this.state.action);\n\t\t}\n\t\tthis.setState({ action: null });\n\t}\n\n\tstartFiringAction(action: BaseAction) {\n\t\tvar setState = true;\n\t\tif (this.props.actionStartedFiring) {\n\t\t\tsetState = this.props.actionStartedFiring(action);\n\t\t}\n\t\tif (setState) {\n\t\t\tthis.setState({ action: action });\n\t\t}\n\t}\n\n\tonMouseMove(event) {\n\t\tvar diagramEngine = this.props.diagramEngine;\n\t\tvar diagramModel = diagramEngine.getDiagramModel();\n\t\t//select items so draw a bounding box\n\t\tif (this.state.action instanceof SelectingAction) {\n\t\t\tvar relative = diagramEngine.getRelativePoint(event.clientX, event.clientY);\n\n\t\t\t_.forEach(diagramModel.getNodes(), node => {\n\t\t\t\tif ((this.state.action as SelectingAction).containsElement(node.x, node.y, diagramModel)) {\n\t\t\t\t\tnode.setSelected(true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t_.forEach(diagramModel.getLinks(), link => {\n\t\t\t\tvar allSelected = true;\n\t\t\t\t_.forEach(link.points, point => {\n\t\t\t\t\tif ((this.state.action as SelectingAction).containsElement(point.x, point.y, diagramModel)) {\n\t\t\t\t\t\tpoint.setSelected(true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tallSelected = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (allSelected) {\n\t\t\t\t\tlink.setSelected(true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.state.action.mouseX2 = relative.x;\n\t\t\tthis.state.action.mouseY2 = relative.y;\n\n\t\t\tthis.fireAction();\n\t\t\tthis.setState({ action: this.state.action });\n\t\t\treturn;\n\t\t} else if (this.state.action instanceof MoveItemsAction) {\n\t\t\tlet amountX = event.clientX - this.state.action.mouseX;\n\t\t\tlet amountY = event.clientY - this.state.action.mouseY;\n\t\t\tlet amountZoom = diagramModel.getZoomLevel() / 100;\n\n\t\t\t_.forEach(this.state.action.selectionModels, model => {\n\t\t\t\t// in this case we need to also work out the relative grid position\n\t\t\t\tif (\n\t\t\t\t\tmodel.model instanceof NodeModel ||\n\t\t\t\t\t(model.model instanceof PointModel && !model.model.isConnectedToPort())\n\t\t\t\t) {\n\t\t\t\t\tmodel.model.x = diagramModel.getGridPosition(model.initialX + amountX / amountZoom);\n\t\t\t\t\tmodel.model.y = diagramModel.getGridPosition(model.initialY + amountY / amountZoom);\n\n\t\t\t\t\tif (model.model instanceof NodeModel) {\n\t\t\t\t\t\tmodel.model.positionChanged();\n\n\t\t\t\t\t\t// update port coordinates as well\n\t\t\t\t\t\t_.forEach(model.model.getPorts(), port => {\n\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(port);\n\t\t\t\t\t\t\tport.updateCoords(portCoords);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (diagramEngine.isSmartRoutingEnabled()) {\n\t\t\t\t\t\tdiagramEngine.calculateRoutingMatrix();\n\t\t\t\t\t}\n\t\t\t\t} else if (model.model instanceof PointModel) {\n\t\t\t\t\t// we want points that are connected to ports, to not necessarily snap to grid\n\t\t\t\t\t// this stuff needs to be pixel perfect, dont touch it\n\t\t\t\t\tmodel.model.x = model.initialX + diagramModel.getGridPosition(amountX / amountZoom);\n\t\t\t\t\tmodel.model.y = model.initialY + diagramModel.getGridPosition(amountY / amountZoom);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (diagramEngine.isSmartRoutingEnabled()) {\n\t\t\t\tdiagramEngine.calculateCanvasMatrix();\n\t\t\t}\n\n\t\t\tthis.fireAction();\n\t\t\tif (!this.state.wasMoved) {\n\t\t\t\tthis.setState({ wasMoved: true });\n\t\t\t} else {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t} else if (this.state.action instanceof MoveCanvasAction) {\n\t\t\t//translate the actual canvas\n\t\t\tif (this.props.allowCanvasTranslation) {\n\t\t\t\tdiagramModel.setOffset(\n\t\t\t\t\tthis.state.action.initialOffsetX + (event.clientX - this.state.action.mouseX),\n\t\t\t\t\tthis.state.action.initialOffsetY + (event.clientY - this.state.action.mouseY)\n\t\t\t\t);\n\t\t\t\tthis.fireAction();\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t}\n\t}\n\n\tonKeyUp(event) {\n\t\t//delete all selected\n\t\tif (this.props.deleteKeys.indexOf(event.keyCode) !== -1) {\n\t\t\t_.forEach(this.props.diagramEngine.getDiagramModel().getSelectedItems(), element => {\n\t\t\t\t//only delete items which are not locked\n\t\t\t\tif (!this.props.diagramEngine.isModelLocked(element)) {\n\t\t\t\t\telement.remove();\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.forceUpdate();\n\t\t}\n\t}\n\n\tonMouseUp(event) {\n\t\tvar diagramEngine = this.props.diagramEngine;\n\t\t//are we going to connect a link to something?\n\t\tif (this.state.action instanceof MoveItemsAction) {\n\t\t\tvar element = this.getMouseElement(event);\n\t\t\t_.forEach(this.state.action.selectionModels, model => {\n\t\t\t\t//only care about points connecting to things\n\t\t\t\tif (!(model.model instanceof PointModel)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (element && element.model instanceof PortModel && !diagramEngine.isModelLocked(element.model)) {\n\t\t\t\t\tlet link = model.model.getLink();\n\t\t\t\t\tif (link.getTargetPort() !== null) {\n\t\t\t\t\t\t//if this was a valid link already and we are adding a node in the middle, create 2 links from the original\n\t\t\t\t\t\tif (link.getTargetPort() !== element.model && link.getSourcePort() !== element.model) {\n\t\t\t\t\t\t\tconst targetPort = link.getTargetPort();\n\t\t\t\t\t\t\tlet newLink = link.clone({});\n\t\t\t\t\t\t\tnewLink.setSourcePort(element.model);\n\t\t\t\t\t\t\tnewLink.setTargetPort(targetPort);\n\t\t\t\t\t\t\tlink.setTargetPort(element.model);\n\t\t\t\t\t\t\ttargetPort.removeLink(link);\n\t\t\t\t\t\t\tnewLink.removePointsBefore(newLink.getPoints()[link.getPointIndex(model.model)]);\n\t\t\t\t\t\t\tlink.removePointsAfter(model.model);\n\t\t\t\t\t\t\tdiagramEngine.getDiagramModel().addLink(newLink);\n\t\t\t\t\t\t\t//if we are connecting to the same target or source, remove tweener points\n\t\t\t\t\t\t} else if (link.getTargetPort() === element.model) {\n\t\t\t\t\t\t\tlink.removePointsAfter(model.model);\n\t\t\t\t\t\t} else if (link.getSourcePort() === element.model) {\n\t\t\t\t\t\t\tlink.removePointsBefore(model.model);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlink.setTargetPort(element.model);\n\t\t\t\t\t}\n\t\t\t\t\tdelete this.props.diagramEngine.linksThatHaveInitiallyRendered[link.getID()];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//check for / remove any loose links in any models which have been moved\n\t\t\tif (!this.props.allowLooseLinks && this.state.wasMoved) {\n\t\t\t\t_.forEach(this.state.action.selectionModels, model => {\n\t\t\t\t\t//only care about points connecting to things\n\t\t\t\t\tif (!(model.model instanceof PointModel)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet selectedPoint: PointModel = model.model;\n\t\t\t\t\tlet link: LinkModel = selectedPoint.getLink();\n\t\t\t\t\tif (link.getSourcePort() === null || link.getTargetPort() === null) {\n\t\t\t\t\t\tlink.remove();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//remove any invalid links\n\t\t\t_.forEach(this.state.action.selectionModels, model => {\n\t\t\t\t//only care about points connecting to things\n\t\t\t\tif (!(model.model instanceof PointModel)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet link: LinkModel = model.model.getLink();\n\t\t\t\tlet sourcePort: PortModel = link.getSourcePort();\n\t\t\t\tlet targetPort: PortModel = link.getTargetPort();\n\t\t\t\tif (sourcePort !== null && targetPort !== null) {\n\t\t\t\t\tif (!sourcePort.canLinkToPort(targetPort)) {\n\t\t\t\t\t\t//link not allowed\n\t\t\t\t\t\tlink.remove();\n\t\t\t\t\t} else if (\n\t\t\t\t\t\t_.some(\n\t\t\t\t\t\t\t_.values(targetPort.getLinks()),\n\t\t\t\t\t\t\t(l: LinkModel) =>\n\t\t\t\t\t\t\t\tl !== link && (l.getSourcePort() === sourcePort || l.getTargetPort() === sourcePort)\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\t//link is a duplicate\n\t\t\t\t\t\tlink.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tdiagramEngine.clearRepaintEntities();\n\t\t\tthis.stopFiringAction(!this.state.wasMoved);\n\t\t} else {\n\t\t\tdiagramEngine.clearRepaintEntities();\n\t\t\tthis.stopFiringAction();\n\t\t}\n\t\tthis.state.document.removeEventListener(\"mousemove\", this.onMouseMove);\n\t\tthis.state.document.removeEventListener(\"mouseup\", this.onMouseUp);\n\t}\n\n\tdrawSelectionBox() {\n\t\tlet dimensions = (this.state.action as SelectingAction).getBoxDimensions();\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={this.bem(\"__selector\")}\n\t\t\t\tstyle={{\n\t\t\t\t\ttop: dimensions.top,\n\t\t\t\t\tleft: dimensions.left,\n\t\t\t\t\twidth: dimensions.width,\n\t\t\t\t\theight: dimensions.height\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\tvar diagramEngine = this.props.diagramEngine;\n\t\tdiagramEngine.setMaxNumberPointsPerLink(this.props.maxNumberPointsPerLink);\n\t\tdiagramEngine.setSmartRoutingStatus(this.props.smartRouting);\n\t\tvar diagramModel = diagramEngine.getDiagramModel();\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\t{...this.getProps()}\n\t\t\t\tref={ref => {\n\t\t\t\t\tif (ref) {\n\t\t\t\t\t\tthis.props.diagramEngine.setCanvas(ref);\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tonWheel={event => {\n\t\t\t\t\tif (this.props.allowCanvasZoom) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\tconst oldZoomFactor = diagramModel.getZoomLevel() / 100;\n\t\t\t\t\t\tlet scrollDelta = this.props.inverseZoom ? -event.deltaY : event.deltaY;\n\t\t\t\t\t\t//check if it is pinch gesture\n\t\t\t\t\t\tif (event.ctrlKey && scrollDelta % 1 !== 0) {\n\t\t\t\t\t\t\t/*Chrome and Firefox sends wheel event with deltaY that\n                have fractional part, also `ctrlKey` prop of the event is true\n                though ctrl isn't pressed\n              */\n\t\t\t\t\t\t\tscrollDelta /= 3;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tscrollDelta /= 60;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (diagramModel.getZoomLevel() + scrollDelta > 10) {\n\t\t\t\t\t\t\tdiagramModel.setZoomLevel(diagramModel.getZoomLevel() + scrollDelta);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst zoomFactor = diagramModel.getZoomLevel() / 100;\n\n\t\t\t\t\t\tconst boundingRect = event.currentTarget.getBoundingClientRect();\n\t\t\t\t\t\tconst clientWidth = boundingRect.width;\n\t\t\t\t\t\tconst clientHeight = boundingRect.height;\n\t\t\t\t\t\t// compute difference between rect before and after scroll\n\t\t\t\t\t\tconst widthDiff = clientWidth * zoomFactor - clientWidth * oldZoomFactor;\n\t\t\t\t\t\tconst heightDiff = clientHeight * zoomFactor - clientHeight * oldZoomFactor;\n\t\t\t\t\t\t// compute mouse coords relative to canvas\n\t\t\t\t\t\tconst clientX = event.clientX - boundingRect.left;\n\t\t\t\t\t\tconst clientY = event.clientY - boundingRect.top;\n\n\t\t\t\t\t\t// compute width and height increment factor\n\t\t\t\t\t\tconst xFactor = (clientX - diagramModel.getOffsetX()) / oldZoomFactor / clientWidth;\n\t\t\t\t\t\tconst yFactor = (clientY - diagramModel.getOffsetY()) / oldZoomFactor / clientHeight;\n\n\t\t\t\t\t\tdiagramModel.setOffset(\n\t\t\t\t\t\t\tdiagramModel.getOffsetX() - widthDiff * xFactor,\n\t\t\t\t\t\t\tdiagramModel.getOffsetY() - heightDiff * yFactor\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tdiagramEngine.enableRepaintEntities([]);\n\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t\tonMouseDown={event => {\n\t\t\t\t\tif (event.nativeEvent.which === 3) return;\n\t\t\t\t\tthis.setState({ ...this.state, wasMoved: false });\n\n\t\t\t\t\tdiagramEngine.clearRepaintEntities();\n\t\t\t\t\tvar model = this.getMouseElement(event);\n\t\t\t\t\t//the canvas was selected\n\t\t\t\t\tif (model === null) {\n\t\t\t\t\t\t//is it a multiple selection\n\t\t\t\t\t\tif (event.shiftKey) {\n\t\t\t\t\t\t\tvar relative = diagramEngine.getRelativePoint(event.clientX, event.clientY);\n\t\t\t\t\t\t\tthis.startFiringAction(new SelectingAction(relative.x, relative.y));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//its a drag the canvas event\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\n\t\t\t\t\t\t\tthis.startFiringAction(new MoveCanvasAction(event.clientX, event.clientY, diagramModel));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (model.model instanceof PortModel) {\n\t\t\t\t\t\t//its a port element, we want to drag a link\n\t\t\t\t\t\tif (!this.props.diagramEngine.isModelLocked(model.model)) {\n\t\t\t\t\t\t\tvar relative = diagramEngine.getRelativeMousePoint(event);\n\t\t\t\t\t\t\tvar sourcePort = model.model;\n\t\t\t\t\t\t\tvar link = sourcePort.createLinkModel();\n\t\t\t\t\t\t\tlink.setSourcePort(sourcePort);\n\n\t\t\t\t\t\t\tif (link) {\n\t\t\t\t\t\t\t\tlink.removeMiddlePoints();\n\t\t\t\t\t\t\t\tif (link.getSourcePort() !== sourcePort) {\n\t\t\t\t\t\t\t\t\tlink.setSourcePort(sourcePort);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlink.setTargetPort(null);\n\n\t\t\t\t\t\t\t\tlink.getFirstPoint().updateLocation(relative);\n\t\t\t\t\t\t\t\tlink.getLastPoint().updateLocation(relative);\n\n\t\t\t\t\t\t\t\tdiagramModel.clearSelection();\n\t\t\t\t\t\t\t\tlink.getLastPoint().setSelected(true);\n\t\t\t\t\t\t\t\tdiagramModel.addLink(link);\n\n\t\t\t\t\t\t\t\tthis.startFiringAction(\n\t\t\t\t\t\t\t\t\tnew MoveItemsAction(event.clientX, event.clientY, diagramEngine)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//its some or other element, probably want to move it\n\t\t\t\t\t\tif (!event.shiftKey && !model.model.isSelected()) {\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmodel.model.setSelected(true);\n\n\t\t\t\t\t\tthis.startFiringAction(new MoveItemsAction(event.clientX, event.clientY, diagramEngine));\n\t\t\t\t\t}\n\t\t\t\t\tthis.state.document.addEventListener(\"mousemove\", this.onMouseMove);\n\t\t\t\t\tthis.state.document.addEventListener(\"mouseup\", this.onMouseUp);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{this.state.renderedNodes && (\n\t\t\t\t\t<LinkLayerWidget\n\t\t\t\t\t\tdiagramEngine={diagramEngine}\n\t\t\t\t\t\tpointAdded={(point: PointModel, event) => {\n\t\t\t\t\t\t\tthis.state.document.addEventListener(\"mousemove\", this.onMouseMove);\n\t\t\t\t\t\t\tthis.state.document.addEventListener(\"mouseup\", this.onMouseUp);\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\tdiagramModel.clearSelection(point);\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\taction: new MoveItemsAction(event.clientX, event.clientY, diagramEngine)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<NodeLayerWidget diagramEngine={diagramEngine} />\n\t\t\t\t{this.state.action instanceof SelectingAction && this.drawSelectionBox()}\n\t\t\t</div>\n\t\t);\n\t}\n}\n"],"sourceRoot":""}